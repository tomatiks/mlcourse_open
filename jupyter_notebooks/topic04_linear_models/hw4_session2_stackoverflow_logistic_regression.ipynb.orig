{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center>\n",
    "<img src=\"../../img/ods_stickers.jpg\">\n",
    "## Открытый курс по машинному обучению. Сессия № 2\n",
    "Авторы материала: Павел Нестеров. Материал распространяется на условиях лицензии [Creative Commons CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/). Можно использовать в любых целях (редактировать, поправлять и брать за основу), кроме коммерческих, но с обязательным упоминанием автора материала."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# <center> Домашняя работа №4\n",
    "## <center> Логистическая регрессия в задаче тегирования вопросов StackOverflow\n",
    "\n",
    "**Надо вывести формулы, где это просится (да, ручка и бумажка), заполнить код в клетках и выбрать ответы в [веб-форме](https://docs.google.com/forms/d/1I_ticU8rpeoGJjsBUcaInpvgdxdq60hV7IcSvo4rlGo/).**\n",
    "\n",
    "## 0. Описание задачи\n",
    "\n",
    "В этой домашней работе мы с вами изучим и запрограммируем модель для прогнозирования тегов по тексту вопроса на базе многоклассовой логистической регрессии. В отличие от обычной постановки задачи классификации (multiclass), в данном случае один пример может принадлежать одновременно к нескольким классам (multilabel). Мы будем реализовывать онлайн версию алгоритма мультиклассовой классификации.\n",
    "\n",
    "Мы будем использовать небольшую выборку из протеггированных вопросов с сайта StackOverflow размером в 125 тысяч примеров (около 150 Мб, скачайте по [этой](https://drive.google.com/open?id=0B4bl7YMqDnViYVo0V2FubFVhMFE) ссылке).\n",
    "\n",
    "PS: Можно показать, что такая реализация совсем не эффективная и проще было бы использовать векторизированные вычисления. Для данного датасета так и есть. Но на самом деле подобные реализации используются в жизни, но естественно, написаны они не на Python. Например, в онлайн моделях прогнозирования [CTR](https://en.wikipedia.org/wiki/Click-through_rate) юзеру показывается баннер, затем в зависимости от наличия клика происходит обновление параметров модели. В реальной жизни параметров модели может быть несколько сотен миллионов, а у юзера из этих ста миллионов от силы сто или тысяча параметров отличны от нуля, векторизировать такие вычисления не очень эффективно. Обычно все это хранится в огромных кластерах в in-memory базах данных, а обработка пользователей происходит распределенно."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#!pip install watermark\n",
    "%load_ext watermark"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Выведем версии используемых библиотек. Совпадут ли ответы в случае других версий - не гарантируется."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPython 3.6.1\n",
      "IPython 5.3.0\n",
      "\n",
      "numpy 1.13.3\n",
      "scipy 0.19.0\n",
      "pandas 0.20.1\n",
      "matplotlib 2.1.0\n",
      "sklearn 0.19.0\n",
      "\n",
      "compiler   : GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.57)\n",
      "system     : Darwin\n",
      "release    : 16.7.0\n",
      "machine    : x86_64\n",
      "processor  : i386\n",
      "CPU cores  : 8\n",
      "interpreter: 64bit\n",
      "Git hash   : 8dcaa1636b8c08a3f9f28a875badcb23268dd01e\n"
     ]
    }
   ],
   "source": [
    "%watermark -v -m -p numpy,scipy,pandas,matplotlib,sklearn -g"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "sns.set_style(\"dark\")\n",
    "plt.rcParams['figure.figsize'] = 16, 12\n",
    "from tqdm import tqdm_notebook\n",
    "import pandas as pd\n",
    "from collections import defaultdict\n",
    "\n",
    "# поменяйте на свой путь\n",
    "DS_FILE_NAME = '../../data/stackoverflow_sample_125k.tsv'\n",
    "TAGS_FILE_NAME = '../../data/top10_tags.tsv'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
<<<<<<< HEAD
      "{'php', 'java', 'c++', 'javascript', 'jquery', 'ios', 'android', 'html', 'python', 'c#'}\n"
=======
      "{'c++', 'html', 'javascript', 'python', 'ios', 'android', 'c#', 'java', 'jquery', 'php'}\n"
>>>>>>> 7a84b362d3424ed043018d32a88aee7ff40444d8
     ]
    }
   ],
   "source": [
    "top_tags = []\n",
    "with open(TAGS_FILE_NAME, 'r') as f:\n",
    "    for line in f:\n",
    "        top_tags.append(line.strip())\n",
    "top_tags = set(top_tags)\n",
    "print(top_tags)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Многоклассовая логистическая регрессия\n",
    "\n",
    "Вспомним, как получается логистическая регрессия для двух классов $\\left\\{0, 1\\right\\}$, вероятность принадлежности объекта к классу $1$ выписывается по теореме Байеса:\n",
    "\n",
    "$$\\large \\begin{array}{rcl}\n",
    "p\\left(c = 1 \\mid \\vec{x}\\right) &=& \\dfrac{p\\left(\\vec{x} \\mid c = 1\\right)p\\left(c = 1\\right)}{p\\left(\\vec{x} \\mid c = 1\\right)p\\left(c = 1\\right) + p\\left(\\vec{x} \\mid c = 0\\right)p\\left(c = 0\\right)} \\\\\n",
    "&=& \\dfrac{1}{1 + e^{-a}} \\\\\n",
    "&=& \\sigma\\left(a\\right)\n",
    "\\end{array}$$\n",
    "где:\n",
    "- $\\vec{x}$ – вектор признаков объекта\n",
    "- $\\sigma$ – обозначение функции логистического сигмоида при скалярном аргументе\n",
    "- $a = \\log \\frac{p\\left(\\vec{x} \\mid c = 1\\right)p\\left(c = 1\\right)}{p\\left(\\vec{x} \\mid c = 0\\right)p\\left(c = 0\\right)} = \\sum_{i=0}^M w_i x_i$ – это отношение мы моделируем линейной функцией от признаков объекта и параметров модели\n",
    "\n",
    "Данное выражение легко обобщить до множества из $K$ классов, изменится только знаменатель в формуле Байеса. Запишем вероятность принадлежности объекта к классу $k$:\n",
    "$$\\large \\begin{array}{rcl}\n",
    "p\\left(c = k \\mid \\vec{x}\\right) &=& \\dfrac{p\\left(\\vec{x} \\mid c = k\\right)p\\left(c = k\\right)}{\\sum_{i=1}^K p\\left(\\vec{x} \\mid c = i\\right)p\\left(c = i\\right)} \\\\\n",
    "&=& \\dfrac{e^{z_k}}{\\sum_{i=1}^{K}e^{z_i}} \\\\\n",
    "&=& \\sigma_k\\left(\\vec{z}\\right)\n",
    "\\end{array}$$\n",
    "где:\n",
    "- $\\sigma_k$ – обозначение функции softmax при векторном аргументе\n",
    "- $z_k = \\log p\\left(\\vec{x} \\mid c = k\\right)p\\left(c = k\\right) = \\sum_{i=0}^M w_{ki} x_i$ – это выражение моделируется линейной функцией от признаков объекта и параметров модели для класса $k$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Для моделирования полного правдоподобия примера мы используем [категориальное распределение](https://en.wikipedia.org/wiki/Categorical_distribution), а лучше его логарифм (для удобства):\n",
    "\n",
    "$$\\large \\begin{array}{rcl}\n",
    "\\mathcal{L} = \\log p\\left({\\vec{x}}\\right) &=& \\log \\prod_{i=1}^K \\sigma_i\\left(\\vec{z}\\right)^{y_i} \\\\\n",
    "&=& \\sum_{i=1}^K y_i \\log \\sigma_i\\left(\\vec{z}\\right)\n",
    "\\end{array}$$\n",
    "\n",
    "Получается хорошо знакомая нам функция [cross entropy](https://en.wikipedia.org/wiki/Cross_entropy) (если домножить на $-1$). Правдоподобие нужно максимизировать, а, соответственно, перекрестную энтропию нужно минимизировать. Продифференцировав по параметрам модели, мы _легко_ получим правила обновления весов для градиентного спуска, **проделайте этот вывод, если вы его не делали** (если вы вдруг сдались, то на [этом](https://www.youtube.com/watch?v=-WiR16raQf4) видео есть разбор вывода, понимание этого вам понадобится для дальнейшего выполнения задания):\n",
    "\n",
    "$$\\large \\begin{array}{rcl}\n",
    "\\frac{\\partial \\mathcal{L}}{\\partial w_{km}} &=& x_m \\left(y_k - \\sigma_k\\left(\\vec{z}\\right)\\right)\n",
    "\\end{array}$$\n",
    "\n",
    "В стандартной формулировке получается, что вектор $\\left(\\sigma_1, \\sigma_2, \\ldots, \\sigma_K\\right)$ образует дискретное вероятностное распределение, т.е. $\\sum_{i=1}^K \\sigma_i = 1$. Но в нашей постановке задачи каждый пример может иметь несколько тегов или одновременно принадлежать к нескольким классам. Для этого мы немного изменим модель:\n",
    "- будем считать, что все теги независимы друг от друга, т.е. каждый исход – это логистическая регрессия на два класса (либо есть тег, либо его нет), тогда вероятность наличия тега у примера запишется следующим образом (каждый тег/класс как и в многоклассовой логрегрессии имеет свой набор параметров):\n",
    "$$\\large p\\left(\\text{tag}_k \\mid \\vec{x}\\right) = \\sigma\\left(z_k\\right) = \\sigma\\left(\\sum_{i=1}^M w_{ki} x^i \\right)$$\n",
    "- наличие каждого тега мы будем моделировать с помощью <a href=\"https://en.wikipedia.org/wiki/Bernoulli_distribution\">распределения Бернулли</a>\n",
    "\n",
    "Ваше первое задание –  записать упрощенное выражение логарифма правдоподобия примера с признаками $\\vec{x}$. Как правило, многие алгоритмы оптимизации имеют интерфейс для минимизации функции, мы последуем этой же традиции, и домножим полученное выражение на $-1$, а во второй части выведем формулы для минимизации полученного выражения."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=\"red\">Варианты ответа:</font>\n",
    "1. $\\large -\\mathcal{L} = -\\sum_{i=1}^M y_i \\log \\sigma\\left(z_i\\right) + \\left(1 - y_i\\right) \\log \\left(1 - \\sigma\\left(z_i\\right)\\right)$\n",
    "2. <font color='red'>$\\large -\\mathcal{L} = -\\sum_{i=1}^K y_i \\log \\sigma\\left(z_i\\right) + \\left(1 - y_i\\right) \\log \\left(1 - \\sigma\\left(z_i\\right)\\right)$</font>\n",
    "3.  $\\large -\\mathcal{L} = -\\sum_{i=1}^K z_i \\log \\sigma\\left(y_i\\right) + \\left(1 - z_i\\right) \\log \\left(1 - \\sigma\\left(y_i\\right)\\right)$ \n",
    "4. $\\large -\\mathcal{L} = -\\sum_{i=1}^M z_i \\log \\sigma\\left(y_i\\right) + \\left(1 - z_i\\right) \\log \\left(1 - \\sigma\\left(y_i\\right)\\right)$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Вывод формулы обновления весов\n",
    "\n",
    "В качестве второго задания вам предоставляется возможность вывести формулу градиента для $-\\mathcal{L}$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "<font color=\"red\">Варианты ответа:</font>:\n",
    "\n",
    "1.$\\large -\\frac{\\partial \\mathcal{L}}{\\partial w_{km}} = -x_m \\left(\\sigma\\left(z_k\\right) - y_k\\right)$\n",
    "\n",
    "2.<font color='red'>$\\large -\\frac{\\partial \\mathcal{L}}{\\partial w_{km}} = -x_m \\left(y_k - \\sigma\\left(z_k\\right)\\right)$</font>\n",
    "3. $\\large -\\frac{\\partial \\mathcal{L}}{\\partial w_{km}} = \\left(\\sigma\\left(z_k\\right)x_m - y_k\\right)$\n",
    "4. $\\large -\\frac{\\partial \\mathcal{L}}{\\partial w_{km}} = \\left(y_k - \\sigma\\left(z_k\\right)x_m\\right)$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Имплементация базовой модели\n",
    "\n",
    "Вам предлагается каркас класса модели, разберите его внимательно, обращайте внимание на комментарии. Затем заполните пропуски, запустите полученную модель и ответьте на проверочный вопрос.\n",
    "\n",
    "Как вы могли уже заметить, при обновлении веса $w_{km}$ используется значение признака $x_m$, который равен $0$ если слова с индексом $m$ нет в предложении, и больше нуля, если такое слово есть. Соответственно, при вычислении линейной комбинации $z$ весов модели и признаков примера необходимо учитывать только ненулевые признаки объекта.\n",
    "\n",
    "Подсказка:\n",
    "- если реализовывать вычисление сигмоида так же, как в формуле, то при большом отрицательном значении $z$ вычисление $e^{-z}$ превратится в очень большое число, которое вылетит за допустимые пределы\n",
    "- в то же время $e^{-z}$ от большого положительного $z$ будет нулем\n",
    "- воспользуйтесь свойствами функции $\\sigma$ для того, чтобы пофиксить эту ошибку"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 21,
=======
   "execution_count": 5,
>>>>>>> 7a84b362d3424ed043018d32a88aee7ff40444d8
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "class LogRegressor():\n",
    "    \n",
    "    \"\"\"Конструктор\n",
    "    \n",
    "    Параметры\n",
    "    ----------\n",
    "    tags_top : list of string, default=top_tags\n",
    "        список тегов\n",
    "    \"\"\"\n",
    "    def __init__(self, tags=top_tags):      \n",
    "        # словарь который содержит мапинг слов предложений и тегов в индексы (для экономии памяти)\n",
    "        # пример: self._vocab['exception'] = 17 означает что у слова exception индекс равен 17\n",
    "        self._vocab = {}\n",
    "        \n",
    "        # параметры модели: веса\n",
    "        # для каждого класса/тега нам необходимо хранить собственный вектор весов\n",
    "        # по умолчанию у нас все веса будут равны нулю\n",
    "        # мы заранее не знаем сколько весов нам понадобится\n",
    "        # поэтому для каждого класса мы сосздаем словарь изменяемого размера со значением по умолчанию 0\n",
    "        # пример: self._w['java'][self._vocab['exception']]  содержит вес для слова exception тега java\n",
    "        self._w = dict([(t, defaultdict(int)) for t in tags])\n",
    "        \n",
    "        # параметры модели: смещения или вес w_0\n",
    "        self._b = dict([(t, 0) for t in tags])\n",
    "        \n",
    "        self._tags = set(tags)\n",
    "    \n",
    "    \"\"\"Один прогон по датасету\n",
    "    \n",
    "    Параметры\n",
    "    ----------\n",
    "    fname : string, default=DS_FILE_NAME\n",
    "        имя файла с данными\n",
    "        \n",
    "    top_n_train : int\n",
    "        первые top_n_train строк будут использоваться для обучения, остальные для тестирования\n",
    "        \n",
    "    total : int, default=10000000\n",
    "        информация о количестве строк в файле для вывода прогресс бара\n",
    "    \n",
    "    learning_rate : float, default=0.1\n",
    "        скорость обучения для градиентного спуска\n",
    "        \n",
    "    tolerance : float, default=1e-16\n",
    "        используем для ограничения значений аргумента логарифмов\n",
    "    \"\"\"\n",
    "    def iterate_file(self, \n",
    "                     fname=DS_FILE_NAME, \n",
    "                     top_n_train=100000, \n",
    "                     total=125000,\n",
    "                     learning_rate=0.1,\n",
    "                     tolerance=1e-16):\n",
    "        \n",
    "        self._loss = []\n",
    "        n = 0\n",
    "        \n",
    "        # откроем файл\n",
    "        with open(fname, 'r') as f:            \n",
    "            \n",
    "            # прогуляемся по строкам файла\n",
    "            for line in tqdm_notebook(f, total=total, mininterval=1):\n",
    "                pair = line.strip().split('\\t')\n",
    "                if len(pair) != 2:\n",
    "                    continue                \n",
    "                sentence, tags = pair\n",
    "                # слова вопроса, это как раз признаки x\n",
    "                sentence = sentence.split(' ')\n",
    "                # теги вопроса, это y\n",
    "                tags = set(tags.split(' '))\n",
    "                \n",
    "                # значение функции потерь для текущего примера\n",
    "                sample_loss = 0\n",
    "\n",
    "                # прокидываем градиенты для каждого тега\n",
    "                for tag in self._tags:\n",
    "                    # целевая переменная равна 1 если текущий тег есть у текущего примера\n",
    "                    y = int(tag in tags)\n",
    "                    \n",
    "                    # расчитываем значение линейной комбинации весов и признаков объекта                    \n",
    "                    #z = sum([x*self._w[tag][self._vocab[x]] for x in sentence])\n",
    "                    z=self._b[tag]\n",
    "   \n",
    "                    for word in sentence:\n",
    "                        # если в режиме тестирования появляется слово которого нет в словаре, то мы его игнорируем\n",
    "                        if n >= top_n_train and word not in self._vocab:\n",
    "                            continue\n",
    "                        if word not in self._vocab:\n",
    "                            self._vocab[word] = len(self._vocab)\n",
    "                        z += 1*self._w[tag][self._vocab[word]]\n",
    "    \n",
    "                    # вычисляем вероятность наличия тега\n",
    "                    #if z<0: z=0\n",
    "                    sigma = 1/(1+np.exp(-z))\n",
    "                    \n",
    "                    if sigma> (1-tolerance): sigma=(1-tolerance)\n",
    "                    elif sigma<tolerance: sigma=tolerance\n",
    "                    \n",
    "                    # обновляем значение функции потерь для текущего примера\n",
    "                    sample_loss += -y*np.log(sigma)-(1-y)*np.log(1-sigma)\n",
    "                 \n",
    "                    \n",
    "                    # если мы все еще в тренировочной части, то обновим параметры\n",
    "                    if n < top_n_train:\n",
    "                        # вычисляем производную логарифмического правдоподобия по весу\n",
    "                       \n",
    "                        dLdw = y-sigma\n",
    "\n",
    "                        # делаем градиентный шаг\n",
    "                        # мы минимизируем отрицательное логарифмическое правдоподобие (второй знак минус)\n",
    "                        # поэтому мы идем в обратную сторону градиента для минимизации (первый знак минус)\n",
    "                        for word in sentence:                        \n",
    "                            self._w[tag][self._vocab[word]] -= -learning_rate*dLdw\n",
    "                        self._b[tag] -= -learning_rate*dLdw\n",
    "                    \n",
    "                n += 1\n",
    "                        \n",
    "                self._loss.append(sample_loss)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e245a4c615ed41d5934c5a9a4c7ef8d3"
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:93: RuntimeWarning: overflow encountered in exp\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "# создадим эксемпляр модели и пройдемся по датасету\n",
    "model = LogRegressor()\n",
    "model.iterate_file()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'list' object has no attribute 'sum'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-5-a766e3f78090>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[1;33m[\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m4\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m10\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msum\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m: 'list' object has no attribute 'sum'"
     ]
    }
   ],
   "source": [
    "[2,4,10].sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Проверим, действительно ли значение отрицательного логарифмического правдоподобия уменьшалось. Так как мы используем стохастический градентный спуск, не стоит ожидать плавного падения функции ошибки. Мы воспользуемся скользящим средним с окном в 10 000 примеров, чтобы хоть как то сгладить график."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0xa5056a0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(pd.Series(model._loss[:-25000]).rolling(10000).mean());"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean of the loss function on the last 10k train samples: 19.68\n"
     ]
    }
   ],
   "source": [
    "print('Mean of the loss function on the last 10k train samples: %0.2f' % np.mean(model._loss[-35000:-25000]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Вычислите среднее значение функции стоимости на последних 10 000 примеров тренировочного набора, к какому из значений ваш ответ ближе всего?\n",
    "\n",
    "<font color=\"red\">Варианты ответа:</font>\n",
    "1. 17.54\n",
    "2. 18.64\n",
    "\n",
    "3.<font color=\"red\">19.74</font>\n",
    "4. 20.84"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## 4. Тестирование модели\n",
    "\n",
    "В базовой модели первые 100 000 строк используются для обучения, а оставшиеся – для тестирования. Как вы можете заметить, значение отрицательного логарифмического правдоподобия не очень информативно, хоть и позволяет сравнивать разные модели. В качестве четвертого задания вам необходимо модифицировать базовую модель таким образом, чтобы метод `iterate_file` возвращал значение _точности_ на тестовой части набора данных. \n",
    "\n",
    "Точность определим следующим образом:\n",
    "- считаем, что тег у вопроса присутствует, если спрогнозированная вероятность тега больше 0.9\n",
    "- точность одного примера расчитывается как [коэффициент Жаккара](https://ru.wikipedia.org/wiki/Коэффициент_Жаккара) между множеством настоящих тегов и предсказанных моделью\n",
    "  - например, если у примера настоящие теги ['html', 'jquery'], а по версии модели ['ios', 'html', 'java'], то коэффициент Жаккара будет равен |['html', 'jquery'] $\\cap$ ['ios', 'html', 'java']| / |['html', 'jquery'] $\\cup$ ['ios', 'html', 'java']| = |['html']| / |['jquery', 'ios', 'html', 'java']| = 1/4\n",
    "- метод `iterate_file` возвращает **среднюю** точность на тестовом наборе данных"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Обновите определение класса LogRegressor\n",
    "class LogRegressor():\n",
    "    \n",
    "    \"\"\"Конструктор\n",
    "    \n",
    "    Параметры\n",
    "    ----------\n",
    "    tags_top : list of string, default=top_tags\n",
    "        список тегов\n",
    "    \"\"\"\n",
    "    def __init__(self, tags=top_tags):      \n",
    "        # словарь который содержит мапинг слов предложений и тегов в индексы (для экономии памяти)\n",
    "        # пример: self._vocab['exception'] = 17 означает что у слова exception индекс равен 17\n",
    "        self._vocab = {}\n",
    "        \n",
    "        # параметры модели: веса\n",
    "        # для каждого класса/тега нам необходимо хранить собственный вектор весов\n",
    "        # по умолчанию у нас все веса будут равны нулю\n",
    "        # мы заранее не знаем сколько весов нам понадобится\n",
    "        # поэтому для каждого класса мы сосздаем словарь изменяемого размера со значением по умолчанию 0\n",
    "        # пример: self._w['java'][self._vocab['exception']]  содержит вес для слова exception тега java\n",
    "        self._w = dict([(t, defaultdict(int)) for t in tags])\n",
    "        \n",
    "        # параметры модели: смещения или вес w_0\n",
    "        self._b = dict([(t, 0) for t in tags])\n",
    "        \n",
    "        self._tags = set(tags)\n",
    "        \n",
    "        self._accuracy=[]\n",
    "    \n",
    "    \"\"\"Один прогон по датасету\n",
    "    \n",
    "    Параметры\n",
    "    ----------\n",
    "    fname : string, default=DS_FILE_NAME\n",
    "        имя файла с данными\n",
    "        \n",
    "    top_n_train : int\n",
    "        первые top_n_train строк будут использоваться для обучения, остальные для тестирования\n",
    "        \n",
    "    total : int, default=10000000\n",
    "        информация о количестве строк в файле для вывода прогресс бара\n",
    "    \n",
    "    learning_rate : float, default=0.1\n",
    "        скорость обучения для градиентного спуска\n",
    "        \n",
    "    tolerance : float, default=1e-16\n",
    "        используем для ограничения значений аргумента логарифмов\n",
    "    \"\"\"\n",
    "    def iterate_file(self, \n",
    "                     fname=DS_FILE_NAME, \n",
    "                     top_n_train=100000, \n",
    "                     total=125000,\n",
    "                     learning_rate=0.1,\n",
    "                     tolerance=1e-16):\n",
    "        \n",
    "        self._loss = []\n",
    "        n = 0\n",
    "        \n",
    "        # откроем файл\n",
    "        with open(fname, 'r') as f:            \n",
    "            \n",
    "            # прогуляемся по строкам файла\n",
    "            for line in tqdm_notebook(f, total=total, mininterval=1):\n",
    "                pair = line.strip().split('\\t')\n",
    "                if len(pair) != 2:\n",
    "                    continue                \n",
    "                sentence, tags = pair\n",
    "                # слова вопроса, это как раз признаки x\n",
    "                sentence = sentence.split(' ')\n",
    "                # теги вопроса, это y\n",
    "                tags = set(tags.split(' '))\n",
    "                \n",
    "                if n > top_n_train:\n",
    "                    pred_tags=set()\n",
    "                \n",
    "                # значение функции потерь для текущего примера\n",
    "                sample_loss = 0\n",
    "\n",
    "                # прокидываем градиенты для каждого тега\n",
    "                for tag in self._tags:\n",
    "                    # целевая переменная равна 1 если текущий тег есть у текущего примера\n",
    "                    y = int(tag in tags)\n",
    "                    \n",
    "                    # расчитываем значение линейной комбинации весов и признаков объекта                    \n",
    "                    #z = sum([x*self._w[tag][self._vocab[x]] for x in sentence])\n",
    "                    z=self._b[tag]\n",
    "   \n",
    "                    for word in sentence:\n",
    "                        # если в режиме тестирования появляется слово которого нет в словаре, то мы его игнорируем\n",
    "                        if n >= top_n_train and word not in self._vocab:\n",
    "                            continue\n",
    "                        if word not in self._vocab:\n",
    "                            self._vocab[word] = len(self._vocab)\n",
    "                        z += 1*self._w[tag][self._vocab[word]]\n",
    "    \n",
    "                    # вычисляем вероятность наличия тега\n",
    "                    #if z<0: z=0\n",
    "                    sigma = 1/(1+np.exp(-z))\n",
    "                    \n",
    "                    if sigma>(1-tolerance): sigma=(1-tolerance)\n",
    "                    elif sigma<tolerance: sigma=tolerance\n",
    "                    \n",
    "                    if n > top_n_train:\n",
    "                        if sigma>0.9: pred_tags.add(tag)\n",
    "                    \n",
    "                    # обновляем значение функции потерь для текущего примера\n",
    "                    sample_loss += -y*np.log(sigma)-(1-y)*np.log(1-sigma)\n",
    "                 \n",
    "                    \n",
    "                    # если мы все еще в тренировочной части, то обновим параметры\n",
    "                    if n < top_n_train:\n",
    "                        # вычисляем производную логарифмического правдоподобия по весу\n",
    "                       \n",
    "                        dLdw = y-sigma\n",
    "\n",
    "                        # делаем градиентный шаг\n",
    "                        # мы минимизируем отрицательное логарифмическое правдоподобие (второй знак минус)\n",
    "                        # поэтому мы идем в обратную сторону градиента для минимизации (первый знак минус)\n",
    "                        for word in sentence:                        \n",
    "                            self._w[tag][self._vocab[word]] -= -learning_rate*dLdw\n",
    "                        self._b[tag] -= -learning_rate*dLdw\n",
    "                    \n",
    "               \n",
    "                        \n",
    "                self._loss.append(sample_loss)\n",
    "                \n",
    "                if n > top_n_train:\n",
    "                    self._accuracy.append(len(tags & pred_tags)/len(tags | pred_tags))\n",
    "                \n",
    "                n += 1\n",
    "        \n",
    "        return self._accuracy.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "dd95c639ab394e5a98d56cce8f01ffc5"
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:99: RuntimeWarning: overflow encountered in exp\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "ename": "AttributeError",
     "evalue": "'list' object has no attribute 'mean'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-27-fff48cca6e9d>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[0mmodel\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mLogRegressor\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0macc\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0miterate_file\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      3\u001b[0m \u001b[1;31m# выведем полученное значение с точностью до двух знаков\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'%0.2f'\u001b[0m \u001b[1;33m%\u001b[0m \u001b[0macc\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m<ipython-input-26-b3dc9d602631>\u001b[0m in \u001b[0;36miterate_file\u001b[1;34m(self, fname, top_n_train, total, learning_rate, tolerance)\u001b[0m\n\u001b[0;32m    131\u001b[0m                 \u001b[0mn\u001b[0m \u001b[1;33m+=\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    132\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 133\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_accuracy\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m: 'list' object has no attribute 'mean'"
     ]
    }
   ],
   "source": [
    "model = LogRegressor()\n",
    "acc = model.iterate_file()\n",
    "# выведем полученное значение с точностью до двух знаков\n",
    "print('%0.2f' % acc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.58\n"
     ]
    }
   ],
   "source": [
    "acc=np.mean(model._accuracy)\n",
    "print('%0.2f' % acc)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "Ответьте на вопрос,  к какому значению ближе всего полученное значение точности?\n",
    "<font color=\"red\">Варианты ответа:</font>\n",
    "1. 0.39\n",
    "2. 0.49\n",
    "\n",
    "<font color=\"red\">3. 0.59</font>\n",
    "4. 0.69"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## 5. $L_2$-регуляризация\n",
    "\n",
    "В качестве пятого задания вам необходимо добавить в класс `LogRegressor` поддержку $L_2$-регуляризации. В методе `iterate_file` должен появиться параметр `lmbda=0.01` со значением по умолчанию. С учетом регуляризации новая функция стоимости примет вид:\n",
    "\n",
    "$$\\large \\begin{array}{rcl}\n",
    "L &=& -\\mathcal{L} + \\frac{\\lambda}{2} R\\left(W\\right) \\\\\n",
    "&=& -\\mathcal{L} + \\frac{\\lambda}{2} \\sum_{k=1}^K\\sum_{i=1}^M w_{ki}^2\n",
    "\\end{array}$$\n",
    "\n",
    "Градиент первого члена суммы мы уже вывели, а для второго он имеет вид:\n",
    "\n",
    "$$\\large \\begin{array}{rcl}\n",
    "\\frac{\\partial}{\\partial w_{ki}} \\frac{\\lambda}{2} R\\left(W\\right) &=& \\lambda w_{ki}\n",
    "\\end{array}$$\n",
    "\n",
    "Если мы на каждом примере будем делать честное обновление всех весов, то все очень замедлится, ведь нам придется на каждой итерации пробегать по всем словам словаря. В ущерб теоретической точности вы используем грязный трюк: мы будем регуляризаровать только те слова, которые присутствуют в текущем предложении. Не забывайте, что смещение не регуляризируется. `sample_loss` тоже должен остаться без изменений."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Обновите определение класса LogRegressor\n",
    "class LogRegressor():\n",
    "    \n",
    "    \"\"\"Конструктор\n",
    "    \n",
    "    Параметры\n",
    "    ----------\n",
    "    tags_top : list of string, default=top_tags\n",
    "        список тегов\n",
    "    \"\"\"\n",
    "    def __init__(self, tags=top_tags):      \n",
    "        # словарь который содержит мапинг слов предложений и тегов в индексы (для экономии памяти)\n",
    "        # пример: self._vocab['exception'] = 17 означает что у слова exception индекс равен 17\n",
    "        self._vocab = {}\n",
    "        \n",
    "        # параметры модели: веса\n",
    "        # для каждого класса/тега нам необходимо хранить собственный вектор весов\n",
    "        # по умолчанию у нас все веса будут равны нулю\n",
    "        # мы заранее не знаем сколько весов нам понадобится\n",
    "        # поэтому для каждого класса мы сосздаем словарь изменяемого размера со значением по умолчанию 0\n",
    "        # пример: self._w['java'][self._vocab['exception']]  содержит вес для слова exception тега java\n",
    "        self._w = dict([(t, defaultdict(int)) for t in tags])\n",
    "        \n",
    "        # параметры модели: смещения или вес w_0\n",
    "        self._b = dict([(t, 0) for t in tags])\n",
    "        \n",
    "        self._tags = set(tags)\n",
    "        \n",
    "        self._accuracy=[]\n",
    "    \n",
    "    \"\"\"Один прогон по датасету\n",
    "    \n",
    "    Параметры\n",
    "    ----------\n",
    "    fname : string, default=DS_FILE_NAME\n",
    "        имя файла с данными\n",
    "        \n",
    "    top_n_train : int\n",
    "        первые top_n_train строк будут использоваться для обучения, остальные для тестирования\n",
    "        \n",
    "    total : int, default=10000000\n",
    "        информация о количестве строк в файле для вывода прогресс бара\n",
    "    \n",
    "    learning_rate : float, default=0.1\n",
    "        скорость обучения для градиентного спуска\n",
    "        \n",
    "    tolerance : float, default=1e-16\n",
    "        используем для ограничения значений аргумента логарифмов\n",
    "    \"\"\"\n",
    "    def iterate_file(self, \n",
    "                     fname=DS_FILE_NAME, \n",
    "                     top_n_train=100000, \n",
    "                     total=125000,\n",
    "                     learning_rate=0.1,\n",
    "                     tolerance=1e-16,\n",
    "                     lmbda=0.01):\n",
    "        \n",
    "        self._loss = []\n",
    "        n = 0\n",
    "        \n",
    "        # откроем файл\n",
    "        with open(fname, 'r') as f:            \n",
    "            \n",
    "            # прогуляемся по строкам файла\n",
    "            for line in tqdm_notebook(f, total=total, mininterval=1):\n",
    "                pair = line.strip().split('\\t')\n",
    "                if len(pair) != 2:\n",
    "                    continue                \n",
    "                sentence, tags = pair\n",
    "                # слова вопроса, это как раз признаки x\n",
    "                sentence = sentence.split(' ')\n",
    "                # теги вопроса, это y\n",
    "                tags = set(tags.split(' '))\n",
    "                \n",
    "                if n > top_n_train:\n",
    "                    pred_tags=set()\n",
    "                \n",
    "                # значение функции потерь для текущего примера\n",
    "                sample_loss = 0\n",
    "\n",
    "                # прокидываем градиенты для каждого тега\n",
    "                for tag in self._tags:\n",
    "                    # целевая переменная равна 1 если текущий тег есть у текущего примера\n",
    "                    y = int(tag in tags)\n",
    "                    \n",
    "                    # расчитываем значение линейной комбинации весов и признаков объекта                    \n",
    "                    #z = sum([x*self._w[tag][self._vocab[x]] for x in sentence])\n",
    "                    z=self._b[tag]\n",
    "   \n",
    "                    for word in sentence:\n",
    "                        # если в режиме тестирования появляется слово которого нет в словаре, то мы его игнорируем\n",
    "                        if n >= top_n_train and word not in self._vocab:\n",
    "                            continue\n",
    "                        if word not in self._vocab:\n",
    "                            self._vocab[word] = len(self._vocab)\n",
    "                        z += 1*self._w[tag][self._vocab[word]]\n",
    "    \n",
    "                    # вычисляем вероятность наличия тега\n",
    "                    #if z<0: z=0\n",
    "                    sigma = 1/(1+np.exp(-z))\n",
    "                    \n",
    "                    if sigma>(1-tolerance): sigma=(1-tolerance)\n",
    "                    elif sigma<tolerance: sigma=tolerance\n",
    "                    \n",
    "                    if n > top_n_train:\n",
    "                        if sigma>0.9: pred_tags.add(tag)\n",
    "                    \n",
    "                    # обновляем значение функции потерь для текущего примера\n",
    "                    sample_loss += -y*np.log(sigma)-(1-y)*np.log(1-sigma)\n",
    "                 \n",
    "                    \n",
    "                    # если мы все еще в тренировочной части, то обновим параметры\n",
    "                    if n < top_n_train:\n",
    "                        # вычисляем производную логарифмического правдоподобия по весу\n",
    "                       \n",
    "                        dLdw = (y-sigma)-lmbda*self._w[tag][self._vocab[word]]\n",
    "\n",
    "                        # делаем градиентный шаг\n",
    "                        # мы минимизируем отрицательное логарифмическое правдоподобие (второй знак минус)\n",
    "                        # поэтому мы идем в обратную сторону градиента для минимизации (первый знак минус)\n",
    "                        for word in sentence:                        \n",
    "                            self._w[tag][self._vocab[word]] -= -learning_rate*dLdw\n",
    "                        self._b[tag] -= -learning_rate*dLdw\n",
    "                    \n",
    "               \n",
    "                        \n",
    "                self._loss.append(sample_loss)\n",
    "                \n",
    "                if n > top_n_train:\n",
    "                    self._accuracy.append(len(tags & pred_tags)/len(tags | pred_tags))\n",
    "                \n",
    "                n += 1\n",
    "        \n",
    "        return np.mean(self._accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "261d0babc42b46aea173fbe3e2d15b64"
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:100: RuntimeWarning: overflow encountered in exp\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "0.51\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nuV33k8vS5dkf/uh2rKK/bnpanB4aNzhYoTdafpPOzz//XGlpafr73/+ut99+W48//rgkacuWLfrk\nk09oVgsAAFCudTP6+qFmrGU2jZ+9UB8u2K4ym/fls1GRlV/Tl4Rwxvxv//1FkpSZXTmD+dXKvbr9\n6e+9nh8ZUfuFk0dPFOrAsfw6xXc0p1APvLHSuX/weIHb8bbpSW77x3IK9cd3ftDxk0V65bOf3Y5V\nJKGu/xs8NfFsdWmbWqfY4Jvfd8nFF1+se+65R5JkGIYiIyOVk5Oj559/XrNmzQpJgAAAAOEgOipS\nLdI8q14+99F6ZWYXeLkCjZHdMDTh2cWS3JfTVjVmcIZze/WWo0GPy5fxsxfq08W7fR4vs9f8mdPD\nWQX6/qdDevCtVfrT3B/qFM+SDYfd9v/w2zM8zjmrT0vn9qy3Vuvg8XzNcElUK7zy2c/auCvL52wz\nAsdv0pmYmKikpCTl5+drypQpuueee/TQQw/pwQcfVGKi57ppAACAxuyuq/p6jG3ec0LPf7TehGhQ\nH93+lPcZwwq/v6SnXp06Ui3S4tWzfVrQ4zl4LF85eSXO6rmuNu2uvl1LRaXXPZm5Hs9JVvXw26v1\nfvlMqiTtOOj//KpyC0r19ar9bmPtW3pW973l4p7ObXs1KzNf/HhjrWJA3VQ7H56Zmambb75ZV1xx\nhTp27Kh9+/bp0Ucf1bRp07Rz5049+eSToYgTAACg3mvfMllv3n+exzi9O1FTg3ukKyHO8XzwWJdW\nPMGwaXe2/jj3B9332nJNfmGJCoqtbsefr0ERo69W7tO6X47r8f9bq9kf/qgZb6yo8ev/vw9+1Htf\n1/y55/cX/OK2/+KUEV7Pi42OrPE9XcXF1O06VC/K38GsrCyNHz9ef/zjHzV8+HBJ0ldffSVJOnjw\noKZNm6aHHnoo+FECAACEiegoc7+4Hsoq0D++3a7JV53hVtyoKmuZTdYyw5ngwL9Sq007Dp1Sn45N\ng3L/2RPOks1uKCEu2jnmOotXZrO7PecZCFWTyj+8uLTaa+68rLcS4qLVvmWSpr26XJL02j8rn5X0\n1jtz5aYj+mzJLq/3W7IhU7de0qtG8a77pbIQ0CtTz1Wiy3+rqkb2b60lG7w/Czuga3Ot35nlMd41\ng2c5g8XvO/eNN95Qbm6uXn/9dY0bN07jxo1TcTHNUgEAAPyZPeEst/1eHZqE5HUNw9Ajb6/Wlr05\n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\nLPp2bqrhLonm73/dy+NLfkN0JLugzr0Yrx3VRbHR/qumVixXjoryPa8ztFeLOhfC+d3orrpgcDsl\nxUdr0vOexaCW/Zzpltw98be1bsefvesc7T6c6xyvWAocSI/cMkSP/99aj/FbvSyt9Wbaq8v19gOj\n3cYiIyx67d7zAhIfzMFMJwAAQBDFxvhOVIrKk8rYmEi3Yi7++Ksm6k3VBKhpSqzHjGht71nBMAy/\n/R7rG9fWIzX1/+48S3NnjtElZ3WQJP3eS/L02r0j9fq0kc6WMzab7z6a/ma+q2OxWNQsNc7ne+q9\nr7e57Ud4SW7bt0xybsf5eW/WVafWKbVK7L3Nsr/39Tb17thEkqMo1pwqSSjCD0knAABAiIyfvVCG\n4UhIHpqzSjPfWClJKim1aXCPdN1+aS/169LM53OH3qrSVie5yr1O5Na+V6Qvtz31ve58ZpH2u1Qo\nrQ8Kyiun1tUnLkV/WlZZyjq8SpJ039gBio+NUlxM5QLC/CLvrz+yf+vTeqbU1dyZY6qd7baXv9d6\ndWjiHIuKjNAdl/XWb8/rHNDWI65mTxjutv/MJM/nPSuM/00vt/gkx4ztlvLnoH97XpfAB4iQI+kE\nAAAIoaf+/pOOnSxyqypa8d3/7L6tNfXa/nrhD+eoo0uPzwrpafG1fr3azmKOn72wRudVJM+S9Oi7\na/SPb3d4Pa/MZtf42Qtr1F4kUNb94ruH5R9eXKLMbM8iTJL0r6W7NX72Qv1n1T6f10dFRmjiFX00\nelBb/Xn8UPXp2NTnuRUevnmIbvxVd91ycc2WmAbamT3dK9IO79NKvxneMWivFx3lXm03yUe7IMkx\nezv9+oF6fZr3pb7RfpYqI3zwvyIAAECQuRZ+2X7gpHOGs0Kn1ilu+5EREZpx4yCP+4waWH0xFm9c\nZ5L+cudZ1Z7/y/7qq+3+b+3BKvve+0EuXn9YkvTVSt+JXKC5LjN9bvI5Gndhd+d+QXGZHpqz2qPo\njiR9vnxvje4/tFdLjbuwh9q1SKr23CfvGKbObVJ0/uCMoMwsTr9+oMa6tL7JOlWkEqvN7ceDUQPb\nBvx1q+Nabbe6Z2ElKS4mSu/MYBltQ0UhIQAAgCD7y51n+Z1BnHHDQI+x2OhITR87QKVldmVmF6pN\n8wTnM4O1NfXa/tp+8KR6tk/zeY8hPdK1tnyG8Km//1Tt0s1533nObJbZ7B5tMT78X2Wvy7XbjmlI\n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\nAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x5827c908>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = LogRegressor()\n",
    "acc = model.iterate_file()\n",
    "print('%0.2f' % acc)\n",
    "plt.plot(pd.Series(model._loss[:-25000]).rolling(10000).mean());"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ответьте на вопрос, к какому значению ближе всего полученное значение точности?\n",
    "<font color=\"red\">Варианты ответа:</font>:\n",
    "1. 0.3\n",
    "2. 0.35\n",
    "3. 0.4\n",
    "<font color=\"red\">4. 0.52</font>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. ElasticNet регуляризация, вывод\n",
    "Помимо $L_2$ регуляризации, часто используется $L_1$ регуляризация.\n",
    "\n",
    "$$\\large \\begin{array}{rcl}\n",
    "L &=& -\\mathcal{L} + \\frac{\\lambda}{2} R\\left(W\\right) \\\\\n",
    "&=& -\\mathcal{L} + \\lambda \\sum_{k=1}^K\\sum_{i=1}^M \\left|w_{ki}\\right|\n",
    "\\end{array}$$\n",
    "\n",
    "Если линейно объединить $L_1$ и $L_2$ регуляризацию, то полученный тип регуляризации называется ElasticNet:\n",
    "\n",
    "$$\\large \\begin{array}{rcl}\n",
    "L &=& -\\mathcal{L} + \\lambda R\\left(W\\right) \\\\\n",
    "&=& -\\mathcal{L} + \\lambda \\left(\\gamma \\sum_{k=1}^K\\sum_{i=1}^M w_{ki}^2 + \\left(1 - \\gamma\\right) \\sum_{k=1}^K\\sum_{i=1}^M \\left|w_{ki}\\right| \\right)\n",
    "\\end{array}$$\n",
    "- где $\\gamma \\in \\left[0, 1\\right]$\n",
    "\n",
    "В качестве шестого вопроса вам предлагается вывести формулу градиента ElasticNet регуляризации (не учитывая $-\\mathcal{L}$). \n",
    "\n",
    "<font color=\"red\">Варианты ответа:</font>:\n",
    "1. $\\large \\frac{\\partial}{\\partial w_{ki}} \\lambda R\\left(W\\right) = \\lambda \\left(2 \\gamma w_{ki} + \\left(1 - \\gamma\\right) w_{ki}\\right)$ \n",
    "2. $\\large \\frac{\\partial}{\\partial w_{ki}} \\lambda R\\left(W\\right) = \\lambda \\left(2 \\gamma \\left|w_{ki}\\right| + \\left(1 - \\gamma\\right) \\text{sign}\\left(w_{ki}\\right)\\right)$\n",
    "3. <font color=\"red\">$\\large \\frac{\\partial}{\\partial w_{ki}} \\lambda R\\left(W\\right) = \\lambda \\left(2 \\gamma w_{ki} + \\left(1 - \\gamma\\right) \\text{sign}\\left(w_{ki}\\right)\\right)$</font>\n",
    "4. $\\large \\frac{\\partial}{\\partial w_{ki}} \\lambda R\\left(W\\right) = \\lambda \\left(\\gamma w_{ki} + \\left(1 - \\gamma\\right) \\text{sign}\\left(w_{ki}\\right)\\right)$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 7. ElasticNet регуляризация, имплементация\n",
    "\n",
    "В качестве седьмой задачи, вам предлается изменить класс `LogRegressor` таким образом, чтобы метод `iterate_file` принимал два параметра со значениями по умолчанию `lmbda=0.0002` и `gamma=0.1`. Сделайте один проход по датасету с включенной ElasticNet регуляризацией и заданными значениями по умолчанию и ответьте на вопрос."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Обновите определение класса LogRegressor\n",
    "class LogRegressor():\n",
    "    \n",
    "    \"\"\"Конструктор\n",
    "    \n",
    "    Параметры\n",
    "    ----------\n",
    "    tags_top : list of string, default=top_tags\n",
    "        список тегов\n",
    "    \"\"\"\n",
    "    def __init__(self, tags=top_tags):      \n",
    "        # словарь который содержит мапинг слов предложений и тегов в индексы (для экономии памяти)\n",
    "        # пример: self._vocab['exception'] = 17 означает что у слова exception индекс равен 17\n",
    "        self._vocab = {}\n",
    "        \n",
    "        # параметры модели: веса\n",
    "        # для каждого класса/тега нам необходимо хранить собственный вектор весов\n",
    "        # по умолчанию у нас все веса будут равны нулю\n",
    "        # мы заранее не знаем сколько весов нам понадобится\n",
    "        # поэтому для каждого класса мы сосздаем словарь изменяемого размера со значением по умолчанию 0\n",
    "        # пример: self._w['java'][self._vocab['exception']]  содержит вес для слова exception тега java\n",
    "        self._w = dict([(t, defaultdict(int)) for t in tags])\n",
    "        \n",
    "        # параметры модели: смещения или вес w_0\n",
    "        self._b = dict([(t, 0) for t in tags])\n",
    "        \n",
    "        self._tags = set(tags)\n",
    "        \n",
    "        self._accuracy=[]\n",
    "    \n",
    "    \"\"\"Один прогон по датасету\n",
    "    \n",
    "    Параметры\n",
    "    ----------\n",
    "    fname : string, default=DS_FILE_NAME\n",
    "        имя файла с данными\n",
    "        \n",
    "    top_n_train : int\n",
    "        первые top_n_train строк будут использоваться для обучения, остальные для тестирования\n",
    "        \n",
    "    total : int, default=10000000\n",
    "        информация о количестве строк в файле для вывода прогресс бара\n",
    "    \n",
    "    learning_rate : float, default=0.1\n",
    "        скорость обучения для градиентного спуска\n",
    "        \n",
    "    tolerance : float, default=1e-16\n",
    "        используем для ограничения значений аргумента логарифмов\n",
    "    \"\"\"\n",
    "    def iterate_file(self, \n",
    "                     fname=DS_FILE_NAME, \n",
    "                     top_n_train=100000, \n",
    "                     total=125000,\n",
    "                     learning_rate=0.1,\n",
    "                     tolerance=1e-16,\n",
    "                     lmbda=0.0002,\n",
    "                     gamma=0.1):\n",
    "        \n",
    "        self._loss = []\n",
    "        n = 0\n",
    "        \n",
    "        # откроем файл\n",
    "        with open(fname, 'r') as f:            \n",
    "            \n",
    "            # прогуляемся по строкам файла\n",
    "            for line in tqdm_notebook(f, total=total, mininterval=1):\n",
    "                pair = line.strip().split('\\t')\n",
    "                if len(pair) != 2:\n",
    "                    continue                \n",
    "                sentence, tags = pair\n",
    "                # слова вопроса, это как раз признаки x\n",
    "                sentence = sentence.split(' ')\n",
    "                # теги вопроса, это y\n",
    "                tags = set(tags.split(' '))\n",
    "                \n",
    "                if n > top_n_train:\n",
    "                    pred_tags=set()\n",
    "                \n",
    "                # значение функции потерь для текущего примера\n",
    "                sample_loss = 0\n",
    "\n",
    "                # прокидываем градиенты для каждого тега\n",
    "                for tag in self._tags:\n",
    "                    # целевая переменная равна 1 если текущий тег есть у текущего примера\n",
    "                    y = int(tag in tags)\n",
    "                    \n",
    "                    # расчитываем значение линейной комбинации весов и признаков объекта                    \n",
    "                    #z = sum([x*self._w[tag][self._vocab[x]] for x in sentence])\n",
    "                    z=self._b[tag]\n",
    "   \n",
    "                    for word in sentence:\n",
    "                        # если в режиме тестирования появляется слово которого нет в словаре, то мы его игнорируем\n",
    "                        #if n >= top_n_train and word not in self._vocab:\n",
    "                        #    continue\n",
    "                        if word not in self._vocab:\n",
    "                            self._vocab[word] = len(self._vocab)\n",
    "                        z += 1*self._w[tag][self._vocab[word]]\n",
    "    \n",
    "                    # вычисляем вероятность наличия тега\n",
    "                    #if z<0: z=0\n",
    "                    sigma = 1/(1+np.exp(-z))\n",
    "                    \n",
    "                    if sigma>(1-tolerance): sigma=(1-tolerance)\n",
    "                    elif sigma<tolerance: sigma=tolerance\n",
    "                    \n",
    "                    if n > top_n_train:\n",
    "                        if sigma>0.9: pred_tags.add(tag)\n",
    "                    \n",
    "                    # обновляем значение функции потерь для текущего примера\n",
    "                    sample_loss += -y*np.log(sigma)-(1-y)*np.log(1-sigma)\n",
    "                 \n",
    "                    \n",
    "                    # если мы все еще в тренировочной части, то обновим параметры\n",
    "                    if n < top_n_train:\n",
    "                        # вычисляем производную логарифмического правдоподобия по весу\n",
    "                       \n",
    "                        dLdw = (y-sigma)-lmbda*(2*gamma*self._w[tag][self._vocab[word]]+(1-gamma)*np.sign(self._w[tag][self._vocab[word]]))\n",
    "\n",
    "                        # делаем градиентный шаг\n",
    "                        # мы минимизируем отрицательное логарифмическое правдоподобие (второй знак минус)\n",
    "                        # поэтому мы идем в обратную сторону градиента для минимизации (первый знак минус)\n",
    "                        for word in sentence:                        \n",
    "                            self._w[tag][self._vocab[word]] -= -learning_rate*dLdw\n",
    "                        self._b[tag] -= -learning_rate*dLdw\n",
    "                    \n",
    "               \n",
    "                        \n",
    "                self._loss.append(sample_loss)\n",
    "                \n",
    "                if n > top_n_train:\n",
    "                    self._accuracy.append(len(tags & pred_tags)/len(tags | pred_tags))\n",
    "                \n",
    "                n += 1\n",
    "        \n",
    "        return np.mean(self._accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "080ee4430f8e4a6485e56051a656788a"
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:101: RuntimeWarning: overflow encountered in exp\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "0.58\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nyFwbv1rgAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x24ac89b0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = LogRegressor()\n",
    "acc = model.iterate_file()\n",
    "print('%0.2f' % acc)\n",
    "plt.plot(pd.Series(model._loss[:-25000]).rolling(10000).mean());"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "Ответьте на вопрос,  к какому значению ближе всего полученное значение точности:\n",
    "<font color=\"red\">Варианты ответа:</font>\n",
    "1. <font color=\"red\"> 0.59</font>\n",
    "2. 0.69\n",
    "3. 0.79\n",
    "4. 0.82"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 8. Самые важные слова для тега\n",
    "\n",
    "Прелесть линейных моделей в том, что они легко интерпретируемы. Вам предлагается вычислить, какие слова вносят наибольший вклад в вероятность каждого из тегов. А затем ответьте на контрольный вопрос."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "w_df=pd.DataFrame()\n",
    "def calc_id(id):    \n",
    "    x=pd.to_numeric(id) \n",
    "    return new_vocab[x]\n",
    "new_vocab={y:x for x,y in model._vocab.items()}\n",
    "for col in model._w:\n",
    "    w_df[col]=sorted(model._w[col].keys(),key=(lambda x: np.absolute(model._w[col][x])),reverse=True)\n",
    "    w_df[col]= w_df[col].map(new_vocab) # apply(calc_id) #[new_vocab[id] for id in w_df[col].values]\n",
    "#w_df=w_df()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>php</th>\n",
       "      <th>java</th>\n",
       "      <th>c++</th>\n",
       "      <th>javascript</th>\n",
       "      <th>jquery</th>\n",
       "      <th>ios</th>\n",
       "      <th>android</th>\n",
       "      <th>html</th>\n",
       "      <th>python</th>\n",
       "      <th>c#</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>php</td>\n",
       "      <td>dcm</td>\n",
       "      <td>avrf</td>\n",
       "      <td>javascript</td>\n",
       "      <td>jquery</td>\n",
       "      <td>0x0000000000000000</td>\n",
       "      <td>android</td>\n",
       "      <td>0x0000000000000000</td>\n",
       "      <td>python</td>\n",
       "      <td>dist</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>echo</td>\n",
       "      <td>dist</td>\n",
       "      <td>c++</td>\n",
       "      <td>x20</td>\n",
       "      <td>android</td>\n",
       "      <td>ios</td>\n",
       "      <td>activity</td>\n",
       "      <td>3</td>\n",
       "      <td>def</td>\n",
       "      <td>dcm</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>_post</td>\n",
       "      <td>dev</td>\n",
       "      <td>std</td>\n",
       "      <td>x5c</td>\n",
       "      <td>ajax</td>\n",
       "      <td>dylib</td>\n",
       "      <td>ios</td>\n",
       "      <td>html</td>\n",
       "      <td>py</td>\n",
       "      <td>dev</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>x5c</td>\n",
       "      <td>dx</td>\n",
       "      <td>cout</td>\n",
       "      <td>3</td>\n",
       "      <td>try</td>\n",
       "      <td>apache</td>\n",
       "      <td>quot</td>\n",
       "      <td>br</td>\n",
       "      <td>art</td>\n",
       "      <td>std</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>gt</td>\n",
       "      <td>java</td>\n",
       "      <td>py</td>\n",
       "      <td>int</td>\n",
       "      <td>span</td>\n",
       "      <td>nsstring</td>\n",
       "      <td>intent</td>\n",
       "      <td>lt</td>\n",
       "      <td>try</td>\n",
       "      <td>span</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>125</td>\n",
       "      <td>println</td>\n",
       "      <td>cast</td>\n",
       "      <td>125</td>\n",
       "      <td>ready</td>\n",
       "      <td>nil</td>\n",
       "      <td>2015</td>\n",
       "      <td>amp</td>\n",
       "      <td>django</td>\n",
       "      <td>00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     php     java   c++  javascript   jquery                 ios   android  \\\n",
       "0    php      dcm  avrf  javascript   jquery  0x0000000000000000   android   \n",
       "1   echo     dist   c++         x20  android                 ios  activity   \n",
       "2  _post      dev   std         x5c     ajax               dylib       ios   \n",
       "3    x5c       dx  cout           3      try              apache      quot   \n",
       "4     gt     java    py         int     span            nsstring    intent   \n",
       "5    125  println  cast         125    ready                 nil      2015   \n",
       "\n",
       "                 html  python    c#  \n",
       "0  0x0000000000000000  python  dist  \n",
       "1                   3     def   dcm  \n",
       "2                html      py   dev  \n",
       "3                  br     art   std  \n",
       "4                  lt     try  span  \n",
       "5                 amp  django    00  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "w_df.head(6)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Для многих тегов наличие самого тега в предложении является важным сигналом, у многих сам тег является самым сильным сигналом, что не удивительно. Для каких из тегов само название тега не входит в топ-5 самых важных?\n",
    "\n",
    "<font color=\"red\">Варианты ответа:</font>\n",
<<<<<<< HEAD
    "1. <font color=\"red\">java, c#</font>\n",
    "2. php, javascript\n",
    "3. html, jquery\n",
    "4. ios, android"
=======
    "1. c#\n",
    "2. javascript\n",
    "3. jquery\n",
    "4. android"
>>>>>>> 7a84b362d3424ed043018d32a88aee7ff40444d8
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## 9. Сокращаем размер словаря\n",
    "Сейчас количество слов в словаре – 519290, если бы это была выборка из 10 миллионов вопросов с сайта StackOverflow, то размер словаря был бы миллионов 10. Регуляризировать модель можно не только изящно математически, но и топорно, например, ограничить размер словаря. Вам предоставляется возможность внести следующие изменения в класс `LogRegressor`:\n",
    "- добавить в метод `iterate_file` еще один аргумент со значением по умолчанию `update_vocab=True`\n",
    "- при `update_vocab=True` разрешать добавлять слова в словарь в режиме обучения\n",
    "- при `update_vocab=False` игнорировать слова не из словаря\n",
    "- добавить в класс метод `filter_vocab(n=10000)`, который оставит в словаре только топ-n самых популярных слов"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Обновите определение класса LogRegressor\n",
    "class LogRegressor():\n",
    "    \n",
    "    \"\"\"Конструктор\n",
    "    \n",
    "    Параметры\n",
    "    ----------\n",
    "    tags_top : list of string, default=top_tags\n",
    "        список тегов\n",
    "    \"\"\"\n",
    "    def __init__(self, tags=top_tags):      \n",
    "        # словарь который содержит мапинг слов предложений и тегов в индексы (для экономии памяти)\n",
    "        # пример: self._vocab['exception'] = 17 означает что у слова exception индекс равен 17\n",
    "        self._vocab = {}\n",
    "        self._top={}\n",
    "        \n",
    "        # параметры модели: веса\n",
    "        # для каждого класса/тега нам необходимо хранить собственный вектор весов\n",
    "        # по умолчанию у нас все веса будут равны нулю\n",
    "        # мы заранее не знаем сколько весов нам понадобится\n",
    "        # поэтому для каждого класса мы сосздаем словарь изменяемого размера со значением по умолчанию 0\n",
    "        # пример: self._w['java'][self._vocab['exception']]  содержит вес для слова exception тега java\n",
    "        self._w = dict([(t, defaultdict(int)) for t in tags])\n",
    "        \n",
    "        # параметры модели: смещения или вес w_0\n",
    "        self._b = dict([(t, 0) for t in tags])\n",
    "        \n",
    "        self._tags = set(tags)\n",
    "        \n",
    "        self._accuracy=[]\n",
    "    \n",
    "    \"\"\"Один прогон по датасету\n",
    "    \n",
    "    Параметры\n",
    "    ----------\n",
    "    fname : string, default=DS_FILE_NAME\n",
    "        имя файла с данными\n",
    "        \n",
    "    top_n_train : int\n",
    "        первые top_n_train строк будут использоваться для обучения, остальные для тестирования\n",
    "        \n",
    "    total : int, default=10000000\n",
    "        информация о количестве строк в файле для вывода прогресс бара\n",
    "    \n",
    "    learning_rate : float, default=0.1\n",
    "        скорость обучения для градиентного спуска\n",
    "        \n",
    "    tolerance : float, default=1e-16\n",
    "        используем для ограничения значений аргумента логарифмов\n",
    "    \"\"\"\n",
    "    def iterate_file(self, \n",
    "                     fname=DS_FILE_NAME, \n",
    "                     top_n_train=100000, \n",
    "                     total=125000,\n",
    "                     learning_rate=0.1,\n",
    "                     tolerance=1e-16,\n",
    "                     lmbda=0.0002,\n",
    "                     gamma=0.1,\n",
    "                     update_vocab=True):\n",
    "        \n",
    "        self._loss = []\n",
    "        n = 0\n",
    "        \n",
    "        # откроем файл\n",
    "        with open(fname, 'r') as f:            \n",
    "            \n",
    "            # прогуляемся по строкам файла\n",
    "            for line in tqdm_notebook(f, total=total, mininterval=1):\n",
    "                pair = line.strip().split('\\t')\n",
    "                if len(pair) != 2:\n",
    "                    continue                \n",
    "                sentence, tags = pair\n",
    "                # слова вопроса, это как раз признаки x\n",
    "                sentence = sentence.split(' ')\n",
    "                # теги вопроса, это y\n",
    "                tags = set(tags.split(' '))\n",
    "                \n",
    "                if n > top_n_train:\n",
    "                    pred_tags=set()\n",
    "                \n",
    "                # значение функции потерь для текущего примера\n",
    "                sample_loss = 0\n",
    "\n",
    "                # прокидываем градиенты для каждого тега\n",
    "                for tag in self._tags:\n",
    "                    # целевая переменная равна 1 если текущий тег есть у текущего примера\n",
    "                    y = int(tag in tags)\n",
    "                    \n",
    "                    # расчитываем значение линейной комбинации весов и признаков объекта                    \n",
    "                    #z = sum([x*self._w[tag][self._vocab[x]] for x in sentence])\n",
    "                    z=self._b[tag]\n",
    "   \n",
    "                    for word in sentence:\n",
    "                        if word in self._top:\n",
    "                            self._top[word]+=1\n",
    "                        else:\n",
    "                            self._top[word]=1\n",
    "            \n",
    "                        # если в режиме тестирования появляется слово которого нет в словаре, то мы его игнорируем\n",
    "                        #if n >= top_n_train and word not in self._vocab:\n",
    "                        #    continue                       \n",
    "                        if word not in self._vocab:\n",
    "                            if update_vocab==True:\n",
    "                                self._vocab[word] = len(self._vocab)\n",
    "                                z += 1*self._w[tag][self._vocab[word]]\n",
    "                            else:\n",
    "                                z += 0\n",
    "                        else:\n",
    "                            z += 1*self._w[tag][self._vocab[word]]\n",
    "                            \n",
    "                        \n",
    "    \n",
    "                    # вычисляем вероятность наличия тега\n",
    "                    #if z<0: z=0\n",
    "                    sigma = 1/(1+np.exp(-z))\n",
    "                    \n",
    "                    if sigma>(1-tolerance): sigma=(1-tolerance)\n",
    "                    elif sigma<tolerance: sigma=tolerance\n",
    "                    \n",
    "                    if n > top_n_train:\n",
    "                        if sigma>0.9: pred_tags.add(tag)\n",
    "                    \n",
    "                    # обновляем значение функции потерь для текущего примера\n",
    "                    sample_loss += -y*np.log(sigma)-(1-y)*np.log(1-sigma)\n",
    "                 \n",
    "                    \n",
    "                    # если мы все еще в тренировочной части, то обновим параметры\n",
    "                    if n < top_n_train:\n",
    "                        # вычисляем производную логарифмического правдоподобия по весу\n",
    "                       \n",
    "                        dLdw = (y-sigma)-lmbda*(2*gamma*self._w[tag][self._vocab[word]]+(1-gamma)*np.sign(self._w[tag][self._vocab[word]]))\n",
    "\n",
    "                        # делаем градиентный шаг\n",
    "                        # мы минимизируем отрицательное логарифмическое правдоподобие (второй знак минус)\n",
    "                        # поэтому мы идем в обратную сторону градиента для минимизации (первый знак минус)\n",
    "                        for word in sentence:  \n",
    "                            if word in self._vocab:\n",
    "                                self._w[tag][self._vocab[word]] -= -learning_rate*dLdw\n",
    "                        self._b[tag] -= -learning_rate*dLdw\n",
    "                    \n",
    "               \n",
    "                        \n",
    "                self._loss.append(sample_loss)\n",
    "                \n",
    "                if n > top_n_train:\n",
    "                    self._accuracy.append(len(tags & pred_tags)/len(tags | pred_tags))\n",
    "                \n",
    "                n += 1\n",
    "        \n",
    "        return np.mean(self._accuracy)\n",
    "    \n",
    "    def filter_vocab(self,n=10000):\n",
    "        \n",
    "        top_words=sorted(self._top.keys(),key=(lambda x: self._top[x]),reverse=True)\n",
    "        top_words=top_words[:n]\n",
    "        self._vocab1={word:self._vocab[word] for word in top_words}\n",
    "        self._vocab=self._vocab1\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4ee3a6dbaf244fabb90f750177c9ae83"
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:115: RuntimeWarning: overflow encountered in exp\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "0.58\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nyFwbv1rgAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x28024588>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = LogRegressor()\n",
    "acc = model.iterate_file(update_vocab=True)\n",
    "print('%0.2f' % acc)\n",
    "plt.plot(pd.Series(model._loss[:-25000]).rolling(10000).mean());"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# оставим только топ 10 000 слов\n",
    "model.filter_vocab(n=10000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "407c6efa24ec439895ab5f05e8ac368e"
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:115: RuntimeWarning: overflow encountered in exp\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "0.63\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA50AAAKqCAYAAAC5JDrrAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzs3Xl8VNX9//H3JJOdhBASIOxhk0V2FZRFiFprXapWKy70\na3G3LnVH++tXvw9rRat8UVxBaa215au2KrjVtuyb7PsmWyAsIYQEErIn8/sj5GYmsyaZmTuTeT3/\n8dxzz73304jad86951hsNptNAAAAAAAEQJTZBQAAAAAAWi9CJwAAAAAgYAidAAAAAICAIXQCAAAA\nAAKG0AkAAAAACBhrMB6Sn18cjMcAAAAAAEyQkZHs9hwznQAAAACAgCF0AgAAAAAChtAJAAAAAAgY\nQicAAAAAIGAInQAAAACAgCF0AgAAAAAChtAJAAAAAAgYQicAAAAAIGAInQAAAACAgCF0AgAAAAAC\nhtAJAAAAAAgYQicAAAAAIGAInQAAAACAgCF0AgAAAAAChtAJAAAAAAgYQicAAAAAIGAInQAAAACA\ngCF0AgAAAAAChtAJAAAAAAgYQicAAAAAIGAInQAAAACAgCF0AgAAAAAChtAJAAAAAAgYQicAAAAA\nIGAInQAAAACAgCF0AgAAAAAChtAJAAAAAAgYQicAAAAAIGAInZIWbzys+SsOmF0GAAAAALQ6VrML\nCAUffLtLknT1RT3NLQQAAAAAWhlmOu1UVdeYXQIAAAAAtCqETjtfrcwxuwQAAAAAaFUInXb2Hjlt\ndgkAAAAA0KoQOu1ktk80uwQAAAAAaFUInZLuuHKAJKlzepLJlQAAAABA60LolBQfW7eIb2VVrcmV\nAAAAAEDrQuiUFBdT92OorGL1WgAAAADwJ0KnpNiYaElSUUmFyZUAAAAAQOtC6JRUWFwXNhesP2xy\nJQAAAADQuhA6JfXolGx2CQAAAADQKhE6JbVrEydJGtK7vcmVAAAAAEDrQuiUFMNCQgAAAAAQEIRO\nSVEWiySppKza5EoAAAAAoHUhdNrJzS8xuwQAAAAAaFUInQAAAACAgCF0NpJfVGZ2CQAAAADQahA6\nG9m8t8DsEgAAAACg1SB0nmU5+9fM9omm1gEAAAAArQmh86yfZ/eRJFWwbQoAAAAA+A2h86y42GhJ\nUkUloRMAAAAA/IXQeVZ8TF3oLDhdbnIlAAAAANB6EDrPsp39q8Vi8TgOAAAAAOA7QudZaclxkni9\nFgAAAAD8idB5ltVa96P4dvVBkysBAAAAgNaD0HlWalLdTGdVda3JlQAAAABA60HoPKt923hJkjWa\nHwkAAAAA+ItPCWvTpk2aPHmyJKmgoED33Xefbr31Vk2aNEkHD7au11Gra5jpBAAAAAB/sXobMHv2\nbM2bN08JCQmSpD/84Q+6+uqr9ZOf/ESrVq3Svn371L1794AXCgAAAAAIP15nOrt3766ZM2cax+vX\nr1deXp5uv/12zZ8/XxdccEFACwymrMxkXq8FAAAAAD/ymrAuv/xyWa0NE6KHDx9WSkqK/vSnPykz\nM1OzZ88OaIHBFBcTreqaWtXW2rwPBgAAAAB41eRpvdTUVGVnZ0uSsrOztXXrVr8XZZaC0+WSpNKK\napMrAQAAAIDWocmhc+TIkVq8eLEkac2aNerTp4/fizJLVmaKJBYTAgAAAAB/aXLofOqpp/TFF19o\n0qRJWrp0qe69995A1GWK+u85q9mrEwAAAAD8wmKz2QL+AWN+fnGgH+EXU6YtkCQ9NmmYBvVMM7ka\nAAAAAAgPGRnJbs+xVKsL+4+cNrsEAAAAAGgVCJ12JgzrLEnq3TnF5EoAAAAAoHUgdNpp3zZeklRV\nw5YpAAAAAOAPhE47VWcXENpzuMjkSgAAAACgdSB02vnX2lxJ0pcrckyuBAAAAABaB0KnnWF90s0u\nAQAAAABaFUKnnS4ZSUb7dGmliZUAAAAAQOtA6LQzcXgXo71pzwkTKwEAAACA1oHQaScuNtpod2yX\naGIlAAAAANA6EDrtRFksRvv0GV6vBQAAAICWInQ2Mrxv3WJCew6fMrkSAAAAAAh/hM5GhvRuL8lx\nUSEAAAAAQPMQOhuxnH3F9odcZjoBAAAAoKUInY2s3pEnSVq2+ajJlQAAAABA+CN0NjKsT7rZJQAA\nAABAq0HobGTkOR0kSYN7tTe5EgAAAAAIf4TORlKSYiRJW/YVmFwJAAAAAIQ/Qmcj0VENP5LaWpuJ\nlQAAAABA+CN0enDsZKnZJQAAAABAWCN0emCzMdMJAAAAAC1B6HThxxd0lyRVVNWaXAkAAAAAhDdC\npwvxsdGSpPLKapMrAQAAAIDwRuh0Ye2ufEnS16tyTK4EAAAAAMIbodOF3PwSSdL2A4UmVwIAAAAA\n4Y3Q6cK147KMdu7xEhMrAQAAAIDwRuh04YIBHY32f89ZbWIlAAAAABDeCJ0uxFr5sQAAAACAP5Cu\nXEhNjnM4rqll6xQAAAAAaA5CpwtRFovDcVlFjUmVAAAAAEB4I3S6Yb+Y0PYDJ02sBAAAAADCF6HT\njWvGNITOd77Ypg27802sBgAAAADCE6HTRzP/sUU2m83sMgAAAAAgrBA6m2DdLmY7AQAAAKApCJ0e\nTLqkr8NxTl6xSZUAAAAAQHgidHpwycguDseETgAAAABoGkKnB9FRUbrqoh7Gcc9OKSZWAwAAAADh\nh9DpxXXjeulH53eTJH254oC5xQAAAABAmCF0emGxWJSbX2J2GQAAAAAQlgidPrjnmkFmlwAAAAAA\nYYnQ6YPkxFizSwAAAACAsETobKKF63N16kyl2WUAAAAAQFggdDbRh9/t1iMzl2nppiNmlwIAAAAA\nIY/Q2Ux//Gan2SUAAAAAQMgjdPqoTUKM2SUAAAAAQNghdPpo+gNjnPr4thMAAAAAPCN0+sga7fyj\nemTmMhMqAQAAAIDwQehsgkE926l3lxSzywAAAACAsEHobILHJg3Xbyaf59BXU1trUjUAAAAAEPoI\nnc0w7Z7RRvuulxfpTHmVidUAAAAAQOgidDZDh3aJyspseM32wRlLTawGAAAAAEIXobOZBvZsZ3YJ\nAAAAABDyCJ3N9MOhIrNLAAAAAICQR+hspt25p4x2v26pJlYCAAAAAKGL0NlMV13U02jvZtYTAAAA\nAFwidDbTlaN7mF0CAAAAAIQ8QmczxcVG64pR3c0uAwAAAABCGqGzBW6c2MdoFxZXmFgJAAAAAIQm\nQqefPPbmcrNLAAAAAICQQ+gEAAAAAAQMobOFrh/fy+wSAAAAACBkETpb6MJBnYz23iOnPIwEAAAA\ngMhD6GyhtJQ4o51fVGZiJQAAAAAQegidLWSxWBrasngYCQAAAACRh9DpB0nxVknS0YIzJlcCAAAA\nAKGF0OkH8bF1oXPe8gPmFgIAAAAAIYbQ6QcThneWJLVJiDH6Kqtq9PnSfaqorDGrLAAAAAAwHaHT\nD87v30GSVFJWpVqbTZv3FujeVxdr3vIDum/6YpOrAwAAAADzWM0uoFWwW0zo+T+tVU5esYnFAAAA\nAEDoYKbTD9KSG7ZNIXACAAAAQANCpx9Yoz3/GCur+K4TAAAAQGQidAbBpr0FZpcAAAAAAKYgdPrJ\nzy7u5XD8xq/HGe24GPc/5praWk2ZtkBzvt4RsNoAAAAAwCyETj+ZOLyLw3FifIwuv6CbJMlmk46d\nLNWni/aquqbWYdyaHcclScs2H1VVteM5AAAAAAh3hE4/iY2JNto9OiVLktLbJkiSKqpq9OJf1unr\nVTn6fnuew3Wz5m832vOW7w9CpQAAAAAQPIROP7FfTOiaMT0lSbFnX6utrKpVcWmVJCmvsNQYV2uz\nOdwjJTE2wFUCAAAAQHCxT6cfvffkRJ04Xa4OqXUznLHWutnP40VlxpgvV+Sod+e2+uDbnSoqqXS4\nvqyyOnjFAgAAAEAQEDr9KCrKYgROSVq/O1+S9OWKAw7jXvt0s8vrDxxt2ONz894CtU2KNV7V9aTW\nZtOdLy2UJM2Zmt3UsgEAAAAgYHi9NoCG9G7fpPEb95ww2jM+2aT/+dMar9dUVdfo2+8PNrk2AAAA\nAAgGZjoDaMzgTL3/lfetUKzRUQ6r2lZU1hjtU2cq1TbJ9beeU6YtaHmRAAAAABBAzHSGgJl2e3ru\nyT2l+6YvNo7X7MhzdYnT1iv1qqprdPJ0uX8LBAAAAIBmInSabOLwLoqz227l939Z53B+yaajLq9b\nsfWYy/57Xlmsx99aoR0HTvqvSAAAAABoJkJngM14cKzbcwN6tNMtl/X1eL1NNpf95RWeV7r9w9yN\n3osDAAAAgADjm84AS3HzPaYkPXHzcKP984l99PHCPU5jDuefcTjed+S0fvfntf4rEAAAAAACiNAZ\nBG8/erGqzn6D+dBrSyVJj9401GHMzoOFPt3L18Dpy1YrAAAAABBovF4bBHGx0WqTEOPw7WbxmSqH\nMdsPNITOu68eqBkPuX8t115Garwk6bGbhjn0Z7ZPbG65AAAAAOA3hM4gskZbjHbfbm0dzj192wij\nPXpQJ6UkNryWe7q00mg3nsF8fNJwzZmarUFZabphQm+j/1RJpQAAAADAbITOILJYGkJnetsEh3NZ\nmSma9cQEvffkRKfrvv3+oNHOOVbscC4tJc5o/2R0D2OGdEdOocq8LDYEAAAAAIHGN51BNnpgR9Xa\nXK9Ia412/B1Au+Q4FRZXaOH6w9p/5LRG9MtwuiY6yvGahNiGV3gXbTysK0b18EPVAAAAANA8zHQG\n2d3XDNK9Pz3Xp7FXj+kpSaqoqtGuQ0X6239+8HpNjLUhdG7ZW9CsGgEAAADAXwidIWzZ5qMtun7n\nwSI/VQIAAAAAzUPoDGEThnXxeP6iczsFqRIAAAAAaB5CZwgb2LOdx/P9uqW67H/1V2MCUQ4AAAAA\nNBkLCYWwtJR43XHlAL3/1Q6H/icmDVN8nNVp+5R6ifH8bQUAAAAQGpjpDHFjBmeqW4c2Dn0DeqYp\nKzNFUXZbsNiLtfK3FQAAAEBoIJ2Eged+eb5ef3icrNFRum58L6/j7fcDraiqCWRpAAAAAOAR72GG\nAYvFojYJMZr1xIQmX/vligPqnJ6kCwex6BAAAACA4PNppnPTpk2aPHmyJGn79u0aN26cJk+erMmT\nJ+vrr78OaIFoma9W5mj2/O1mlwEAAAAgQnmd6Zw9e7bmzZunhIQESdK2bdv0y1/+UlOmTAl4cfAf\nm83m8NotAAAAAASD15nO7t27a+bMmcbx1q1btWjRIt1666165plnVFJSEtAC0TxpKXEOx4XFFSZV\nAgAAACCSeQ2dl19+uazWhgnRIUOG6Mknn9RHH32kbt266c033wxogWieQT3THI6/357n87W7DhZq\n96Eif5cEAAAAIAI1efXayy67TOeee67R3r6d7wVD0eBe7R2OdzUhRL701w2a9tF6f5cEAAAAIAI1\nOXTecccd2rx5syRp5cqVGjRokN+LQssN65uuS0Z2VUZqvCTp/P4dfLquuqY2kGUBAAAAiDBN3jLl\nueee0/PPP6+YmBilp6fr+eefD0RdaCFrdJRuvayfOqcn6cN/7tKWfQUaMzjT63VfLNtvtFl8CAAA\nAEBL+RQ6u3btqo8//liSNGjQIM2dOzegRcF/iksrJUmrdxxXUvwuTb78HI/jv1qZY7QrqmoUH8tW\nrgAAAACar8mv1yK8/HttrtFeuOFwk669f/oSlZZX+7skAAAAABGE0NnK3XX1wBZd/833ObLZbJoy\nbYFe/3Szn6oCAAAAECkIna3c4F7tNaxPunFss9ncjj1eWOrU99XKHP1z9SFJ0sY9J7Rq2zH/FwkA\nAACg1SJ0RoCHbhiiQVl1+3Z6Wp126rurXPbbB81Z89kiBwAAAIDvCJ0Rov7bzIoq16FzT+4pt9ce\nPF7icJx30nlGFAAAAABcIXRGiP1HT0uSFqzLdXn+939ZZ7RH9MvQ6w+Pc3uvp2etMu4HAAAAAJ4Q\nOiNMTIz3v+UPXD9YbRJiPI5Zs/O4v0oCAAAA0IoROiPEFaO7S5K6d0j2+Zprx2W5Pfft9wdbXBMA\nAACA1o/QGSGSE2IlSVV2CwkVl1ZqyrQFeueLrUbfZed1M9rXjGkInRcP6xyEKgEAAAC0NlazC0Bw\nWKMtkqS9h08ZW6g8/PoySdLqHQ2vyt50SR+H6957cqKqqmsVFxutxRuPOJyrrbUpKsoSyLIBAAAA\nhDlmOiNEYUmFpLp9N6W6wNhYRmq8oiyOITIqyqK42GhJDcG1Xk5ecSBKBQAAANCKEDojxDerGr7B\n3Hv4lDbuOeE05sGfDfF4j9cfHmd8GypJsVb++AAAAADwjNQQIX5941Cj/fWqHG3e6xw6UxJjPd4j\nPtaqGyf0UfTZV2r3sW0KAAAAAC8InRFiSO/2RnvDDye0ZNNRpzHxZ1+j9cYaXffH5o9f7/RPcQAA\nAABaLUInDDE+vi5bUVUT4EoAAAAAtBasXhtB7rhygN7/aodD32//6zxlZaao1maTxeLbSrQd2yUo\nr7BMkmRrwnUAAAAAIg8znREkJcn5m82M1ARJclq11pO7rxlktO94aWHLCwMAAADQahE6I8igrDSn\nvriYpv8RyMpMcTiuqa1tdk0AAAAAWjdCZwRxNZtZvyhQU/Xu3BA873p5UXNLAgAAANDKETojXHO/\nx3zq1hEOx8x2AgAAAHCF0Blh3n18gsYOzmzxfRrPkO7IKWzxPQEAAAC0PqxeG2FirFGacuUAXXVR\nD8XF+LYvpy9yjhXr3Kz23gcCAAAAiCjMdEaoDu0S1bZNnN/u9/fF+1RcWum3+wEAAABoHQidaLaX\n77vQ4fjh15eZVAkAAACAUEXoRLOlt01w6tt+4KRqbTYTqgEAAAAQigidaJHhfdMdjl+Zu1GvfbLZ\npGoAAAAAhBpCJ1rkV9cP1hWjujv0bdlXoOoatlABAAAAQOhEC0VZLLpxYh+n/m++P2hCNQAAAABC\nDaETAfHZkn1mlwAAAAAgBBA64RfdOrRx6rOxoBAAAAAQ8Qid8Iuhfdo79ZVV1JhQCQAAAIBQQuiE\nX3TvkOzUt2ZnngmVAAAAAAglhE74xdA+6U59f1/Md50AAABApCN0wi9irFGaMzVbd141wOgrKasy\nsSIAAAAAoYDQCb+6cFAnh+O8wlKTKgEAAAAQCgid8CuLxaLRAzsax69/utnt2N2HinT6TGUwygIA\nAABgEkIn/O7GiX2M9tEC1zOdJ0+Xa9pH6/XrmcuCVRYAAAAAExA64XcJcdEez+8/elqPv7XCOC4t\nrw50SQAAAABMQuiE30VHOf+x2rjnhKZMW6Az5VV6/oO1Due27CsIVmkAAAAAgozQCb+LsUbpunFZ\nxnFNba3xbeeDM5YqNsbxj92787YFtT4AAAAAwUPoREBcPaYhdH66aK/Ducqq2mCXAwAAAMAkhE4E\n3D9XH/I6prScPT0BAACA1ojQiYC5YEAHj+efuW2k0a6utQW6HAAAAAAmIHQiYK4d18vj+T5d2xrt\nklJmOgEAAIDWiNCJgImP9bx1iiQN6d1ekvTsnNWBLgcAAACACQidCJhYq+Mfr+F9053GnDxdLkmq\nqbXp0PGSoNQFAAAAIHisZheA1isxPkYP3TBEiXFW9enSVlFRFk2ZtsBhTG7+GaP97JzVmjM1O9hl\nAgAAAAggQicCalgf59lNAAAAAJGD12thirZtYiVJD90wxKG/uoY9PAEAAIDWhNCJoHr6thFqkxCj\nh8+GzWF90jXjwbHG+coqQicAAADQmvB6LYKqb9dUvf7wOIe+lKRYdc1oo9z8ElVV14g/lgAAAEDr\nwUwnQkLPTsmSpIpqc2c6V247phNFZT6Pt9lsmjJtgaZMW6DjhaUBrAwAAAAIT4ROhITYmLo/ipWV\nNabVsP3ASc2ev11PvrNSb362RbU2m9drSiuqjfa787YHsjwAAAAgLBE6ERJiY6IlSUcKzqi6plbr\nduWrpja4s56vzN1otNftytfWfSddjlu/O1+z52+XzWbT7z9cZ/R3TEuQJFVV1/oUWAEAAIBIwMdz\nCAnffn9QkvTOF9uMvoS4aL35yMVmlaS//mu3sjJHKikhRlEWiySpuLRSb/xjiyTpitHddbSg4ZXa\nVdvy9LPxvfXE2yskSQ9cP1gj+mUEv3AAAAAghDDTiZBVVhG8V21z80uc+k6XVurh15dp/vIDRl99\noJSkM2VVTtfYn3/jH1s0ZdoCbd1f4N9iAQAAgDBC6ERIeOGuUS77m7tvp81mU3lltfeBZy3bfNSp\nr/zs96Vfrcwx+uy3dJlnF0Y9mf5/m3yuAwAAAGhtCJ0ICe1T4l32/+/Hm4zVYZtiztc7dP/0JSoq\nqfBpfEZqgtF+8PrBDufcBd8dOYVNqgkAAACIRIROhIT6hYQaKyz2LTQ2tnzLMUnSwbwS1dpssnlZ\n2Oejf+2WJF08rLM6piX6tRYAAAAgkhE6ETLSUuKc+o6ddN770tvsZYndt5ZRFunOlxbqjpcWug2e\n9ivNrt6Rp4Q45/W1duYU6ptVOU79khRr9f6P0akzlV7HAAAAAK0Rq9ciZJw87TlM1tpsuvOlhZKk\nc7ql6qlbR7gc9833DeHQcnbVWaluKxNXM6oHjhYb7QeuG6w2CTFOY17+2wa3df337efryIkzeuvz\nrW7HrN91XBNHdHV7HgAAAGitmOlEyLj1sn6SpKzMZN3700FO5+sDpyTtOlTk9j75hWVG235VWvvt\nTeyVljfMjA7omaYYH2Yu7XVOT9J5/TuoS3qSxzEAAABAJCJ0ImRcMrKr3ntqon77X+frggEdm3WP\npZuOaO2ufOP4s6X7jPY7X7ieiZz+cdNWl3180jCNGdxJkpQU3/CywKM3DdP4oZma/sAYXTs2S5I0\nfmimJL4HBQAAQOTi9VqElCi712FvmNBbny7a63bsgWOn1bNTiiTpqXdWKL+o3GmM/RYnTfmu8kfn\nd9N3aw65PNe9Y7IG9kzTT8dmOay62y45TrdfMUCSdM3YLF0zNssIuoU+rqILAAAAtDbMdCJk/WR0\nD4/nX/tksyRp+ZajLgNnY2MHZ3o8f+l5Dd9c/nxiH103LkuP3jTUaVz9N5/pbRMcvhl1pUtGG0nu\nX+0FAAAAWjtCJ8JW26RYSdL7X+3wafy/1+U69eXZrY57zZgsox0VZdHVY7I0oEc7j99qevPZkrrX\ne5dtPtrsewAAAADhjNdrEdKm3XuhKqtq1CU9SV+vylFVda3mLT8gSTp4vEQPzljSpPut3HpM/bql\nqm2bWFmjo/T0rFXGOVer1kZHRen5O0epuLRSr87dqAd/NqRJz+vTpa32HD7VpGsAAACA1oTQiZDW\nITXBaF95YU9JUsGpci3fekySdKa82mF8ZvtEdevQRhedm6kZnzgvEDT7y+1G+/FJw3yuIzkxVs9N\nuaAppUuSHr5xiB6csbTJ1wEAAACtBaETYWdY3wwjdNpLSYrVC3eNdurvlJaoYyedv6l8Ze7GgNRn\nLyG24R+xhRsOa+LwLgF/JgAAABBK+KYTYWdI7/Yu+1+690KH4wlnA9491wzSdeN7ebznK/df5J/i\nGomKalho6MN/7grIMwAAAIBQxkwnwk6M1fl3Jb+/e7TiYqId+ib/qJ9+OjZLbZNiVVJW5fGeqclx\nfq3RXo+OycrJK9YlI7p6HwwAAAC0Msx0Iqzd9qN+mjM1W53SEp3OWSwWY4Xb7h3beLxPlJetT1ri\n5xN7S5IWbzqiwmL26wQAAEBkIXQiLP3qusEaNbCjsn2cPYyPbZgFTUuJ0y9+fE6gSnMSY617dnVN\nrR57c3nQngsAAACEAkInwtLIczJ0zzWDfB4fY43WsD7puvyCbnrl/jEac26mca4l+3D6Ii3F8dXd\nKdMWBPR5AAAAQCjhm05EjIduaNhjM8YapTlTs7XrYKG6d0wO6HPTUuI9nn/rsy1auytf7z81UZYA\nvuYLAAAAmIGZTkS0c7q3U0Jc4H/3cs2Yng7HtbU2o712V74kudzWBQAAAAh3hE4gCK4d10uxdqvu\n5hU6B0xmOQEAANAaWWw2m837sJbJzy8O9COAkPfxgj36dvVBSdKwPunKSE1Q+7bxmvufHxzG8Zot\nAAAAwk1GhvtP1vimEwiSTu0btnXZuOeE23GHT5xR1wzPW7wAAAAA4YLXa4EgGTs40/sgSTU1AX/5\nAAAAAAgaQicQJFFRFg3rk+51XEl5VYufVWuzadX2Yyopa/m9AAAAgJYgdAJBdP9153odU15R3eT7\nTpm2QFOmLVBNba0k6fvteZo1b7ve+myLMWb1jjydPF3e5HsDAAAALUHoBILIGu39H7kPvt2liqqa\nZt3/VEmlJOl4YZkkaefBIknSviOn9c4X2/T4WyuadV8AAACguQidgMnmTM3W249ebByXlFXp/lcX\n+3x9eWXDzOiXK3O0/+hp5dnt+Tll2gJ9+M9d/ikWAAAAaCJCJ2Ci+6+te902LjZaT9483Oi3Sdp9\nqMine3y1MsdoL9pwWM9/sFartuc5jMnJa9i26PcfrtMmD6vnAgAAAP5E6ASCLDqqbg/O/779PJ3X\nv4PR379HO4dx0z5a73BcUVUjV9vq2odOX+w5fEqvfbq5SdcAAAAAzcU+nUCQzX5yottzFw/rrMUb\njxjHU6Yt0DuPXawz5dV67M3lSoyz6pbL+qpTWpJ6dU4JRrkAAABAizDTCYSQSZf0deq799XFmr98\nvySptKJa7325Q7/781pJdVujAAAAAKGM0AmEkLiYaJf9vTq3depbtytfd7600Dju3cSZzyMnzjSt\nOAAAAKAZCJ1AiElOjHHq+377Mae+N+324JSkh28carSfvm2Ew7k2CTEOK+RK0st/dfxm1JXKqhrt\nyT3ldRwAAADgDqETCDHT7rlQYwZ3cujbdqDQ63WJ8VYN6NFO52alqW/XVIfVcF9/eJziYqP1q+sG\nG32nS6tUVe15P9B7X12s3/9lHcETAAAAzWaxuVoO08/y84u9DwLgZMq0BT6PnTM126nv0PESZaTG\nKz62Yc2wFVuP6r0vdxjH0x8Yo4rKGnVMS/T4/KR4q2b+erzP9QAAACByZGQkuz3HTCcQwn7x43Na\ndH23Dm2zFwQ2AAAgAElEQVQcAqckjRrY0eH40TeW6+lZq7ze60x5dYtqAQAAQGQidAIh7OKhnR2O\n+3dPdTmuZyf3v1lqLDoqSu1T4p36yysbQuW2/Sf12/e+dxpz6kylz88BAAAAJEInENIsFovD8ZQr\nB2hSdh+HvhfuGqX/vv38Jt33pfsudOq7f/oSVdfUymaz6dX/26jDLla3/fCfu5r0HAAAAMCn0Llp\n0yZNnjzZoW/+/Pm66aabAlIUgAY3X9qwd2dinFUXD+vicD6zfVKT7xnVKMzWu3/6YpVXul9caP3u\nfL0yd0OTnwcAAIDIZfU2YPbs2Zo3b54SEhKMvu3bt+vTTz9VENYgAiJe364Ne3TGx1oVFdUQGLNH\ndHF1SbNV19i0eOMRj2O2HyjU5r0FGtK7vV+fDQAAgNbJ60xn9+7dNXPmTOO4sLBQ06dP1zPPPBPQ\nwgDUSYxr+N1QfeCc9cQEPX3bCN16Wb9m3ze1TazL/o8X7vF67YxPNjX7uQAAAIgsXkPn5ZdfLqu1\n7v/01tTU6De/+Y2efvppJSU1/ZU+AE2XGB/j1GeNjlLfrqlO33w2Rf8e7VpSFm86AAAAwCdNWkho\n27ZtysnJ0XPPPadHH31Ue/bs0QsvvBCo2gCobn/MHp2SdcnIrn697+QfnaPM9ol69vbzde24LJdj\nMtsn6q6rBuqxm4Y5ndt5sMiv9QAAAKB18vpNp70hQ4boq6++kiTl5ubq0Ucf1W9+85uAFAagjsVi\n0bNNXJ3WFwlxVr1w12hJUo9Oyfp86X6H8w/fMERD+6Qbx9eNy9JndmMqqtwvOAQAAADUY8sUAJKk\n3905yuE4M93xFfqrx2Rp+gNjjOM/f7szKHUBAAAgvPkUOrt27aqPP/7Yax+A8NU5PUnjh2ZKkjq0\nS1CH1ASnMalt4ox2UUll0GoDAABA+GrS67UAWrdbL+unCwd1Ut9uqW7H/GR0D329KieIVQEAACCc\n8XotAEOMNVrndG+nKA+r4vp7b1AAAAC0boROAE2SlhJvtFduO2ZiJQAAAAgHhE4AzTZ7/nZt2J1v\ndhkAAAAIYYROAC0y8x9bzC4BAAAAIYzQCaDFjheVyWazmV0GAAAAQhCr1wJosanvrJQkvXzfhUpv\n67zVCgAAACIXM50Amqxf17Yu+79ccSC4hQAAACDkEToBNNnU20bqlkv7OvVv3FNgQjUAAAAIZYRO\nAM1y6XndnPqKSyud+nKOFau0vDoYJQEAACAEEToBNNsNE3o7HDdeS+howRn9z5/W6IEZSzR/xQGV\nlFUFsToAAACEAkIngGb78aju+s3kkQ595ZUNs5rP/XGN0f5syT499NpSVdfUBq0+AAAAmI/QCaDZ\noiwW9e7SVr+7c5TRd//0JZoybYEKiytUVe0cMJntBAAAiCyETgAt1jk9yanvjX9sdjm2oqom0OUA\nAAAghBA6AQTE/qPFLvuPnigNciUAAAAwE6ETQFC9/nfXM6AAAABonQidAALuhbtGORyfOuO8tUog\nPfn2Cs0k7AIAAJiC0AkgoJ66Zbgy2yfpwesHG32b9pwIyrNXbj2mlduO6cSpcm34ITjPBAAAgCOr\n2QUAaB0emzRMr87dKElqmxRrzGae072dJGlw7/bG2MLiioDX88G3O7V445GAPwcAAACeEToB+MWg\nnmma8dBYJcXX/WvlrpcX6cYJvY3z1uiGFyu+WLZfPx2bFdB6XAXOqupaxVh5wQMAACCYCJ0A/CYl\nMdZoz5mabWIlrq3fna9RAzuaXQYAAEBE4Vf+AILm0ZuGGu29h08F7DkFp8pd9s+at00lZVUBey4A\nAACcEToBBI194Hvhw3UBW8W2sMT1N6M2SQ+9tjQgzwQAAIBrhE4AQWP/+q0krd6RF5Dn5J0sDch9\nAQAA0HSETgBBM7BnmsPx3/79g8Pxqu3HNGXaAq3bdbzZzygtr9L7X+1o1rU2m01V1bXNfjYAAACc\nEToBhISKqhrNmrddkvTmZ1ubfZ9iu1d4B/as267l6dtGOD2rsZxjxbrjpYW655VFqqh0Pv/6p5s1\nZdoCHTpe0uzaAAAAIhGhE0BIuO/VxX65z9t2gXVwr/aaMzVbfbumOow5edp5oaH/+dMao3305Bmn\n8xv3nJAkPTtntd7+vPmhGAAAINIQOgEEVUZqvMNxYbHrRX92HyqSJFVV1+i1TzY5rEhbXlktm83m\ndM3h/BIdtJuJ/L8Fe4z2W4+ON9q/mf29xxqjLBZt3lug6pq6V23r/1pvzc7mv/4bicoqqjVr3jZN\nmbaA720BAIhAhE4AQfXCXaP1wl2jjOM5X213OW7aR+slSfe8slib9hboibdXSJJOFJXp/ulLNMfF\nd5tb9p10OP7Fj88x2vGx7rclbrzFygsfrtOMTzbp7j8skiTNX37A/f+gCFPrIux7M+OTTVq1vW7R\nqKdnrfJ3SQAAIMQROgEElTU6Spntk4zjbQcKfd46pdZm0/of6l5zXb71mFNYLC5tuM+YcztpwrAu\nDufrw26s1fFfff9ed8jh2H4xoY/+tVvzVxxwWUukWbg+V4/MXKYTp8qadN0PuYHbkxUAAIQ+QicA\nU0z5yQCjvWLLUUlSdJTF4zWrd+Rp7n8aVrx94u0VmjJtgfGK7tLNRxvuf+UAp+uTEmIkSZWNVqj1\ntGLtf9bluuxfbvesSPHhd7tVXFrl8NpyMP2QW6S9hwmwAACEG0InAFPYL9bzyaK9kqSaWsfZw4Ub\nDjsc169u29gH3+6UJF04qJMk6Z5rBslicQ6w9vuEHj5xRn/79w8qLK5QrDXap5pTkhqu/+M3O326\nJpT81c2sbVOt25WvUyUVenbO6hZtb9NUL/5lvV74cF3A9ncFAACBQegEYIo+Xdq67P/F5Q3fYX74\nz10+3Wvs4ExJUn3O7NAuwes1v33ve/1r7SH978cb9e3qgz4956V7LnQ4brzAUKj797pcfbZkn1/u\n9cgby3XoeInX7W3mLdvvl+fZe+eLbcZCUwAAIPQROgGYYnjfDPXr6hw8Jwzv4mK0Z6vPrib73Zq6\nbzMT490vGtRYbn7DjOvPLu7lcWxcbLSG9Uk3jusXGgoH9t+gVrrYp7SxxqsDV1W7v2b/0dMuVxOW\npM9dhE5XW9Z4c7TAcRubZWdfyQ634A8AQCQidAIwzRO3DHfZf8GADk26z9qdxx1mvtqnxLsd++zt\n57s9N7BnmtdnufpWNBy8/ulmo73Uy/eo73yxVXe8tFCrth2TVBdA73nF/T6qz3+wVne8tNDt96+N\nbTi7GJQ7tTabau1eta6qrnHapqa6pla7Dhbq7j8s0pRpC5q0uFFNLUEVAIBgInQCME10VJRumNDb\nOM5snyhJuvmSvk2+V/0WK1LdCrnuNN4n1J6rsHr1RT0lNYTVNgkxRp2S9PnSfW5n+UJFwalybd5b\nYBx7Wq9py74Crd5RF/Bmza/7hvZ4oW+B7qN/7fZpFvUfZ1/xtZ99PZxfohVb68LwnS8t1J0vL1R5\nZbWkum1zPl/qOGO6/8hpY2Zbkp58e6UO5hV7ffY3q3J018uLdPjEGa9jAQCAfxA6AZgqxi4g/vfZ\nYNe2TZxirO7/9fTb/zpP14/3/CqsO4nxMW7PxcY0PHPO1GzNmZqt68b30pyp2erRKdk49/OJfYz2\nvOUH9JJd4A1FH37n+G3s6dIqt2P/9+NNTn3Lt/q+Uu+JU+5fne179nXqsopqzZq/TXe+tFAVlTXa\nk3tKv31/td77cofDq7dv/GOL/udPa1zeK6+wzGnG9Lk/uh4r1c3Wzvhkk7Fo1fT/2+jz/yYAANAy\nvn/4BACBYDfrFhfTsIrs5Rd005crcvTEzcM1oEc7SXVhJSGu7l9bndOTtOtQkbbtP9nkRz4xaZj+\nMNcxdEzK7qPYGN9WsR3cu73D8e4Q2YfycH6J/r54nw4eL9aNE/po1MCOkuQwyylJXyzbr5+OzTKO\ni0oq9PJfNygl0TmQf750n75ckWMcD8pK05jBndyuJPzap5v00r0XOfW/89jFWrr5qLFn56ptdSvQ\nHi8q0+//ss4Yt2jjEaO9/UCh1//NviqrqHH4OdRvswMAAAKPmU4AppowrLMuOreTfvtf5zn0Xzu2\nl165/yIjcEoyAqdUF1Af/flQp/uN7Jfh9Znn9Ginjo1WuJ27YI+iLBZddl43XedlFjXKxXYsoeC3\n76/Wxj0ndPJ0hd6dt01vfb5VZRXVuvLCHpIcf371bDabHn1juY6dLHUZnuctP+BwPPnyczSir/uf\ncX5RufE95pJNDQEyNiZa5/V3/lb307Mzj/W+9LKly7uPT/B4XpLOlFc5vWpb2+gV6DYJ7me8AQCA\nfxE6AZgqxhqtO68aqKzMFIf+qCiL0jwsCCRJFovFaWGg+6491+szoywWvXjPhZozNdvou25c3czf\nzZf2Nb7j9MT+Wm9Ky6tUUub+ldZAWbvzuF78y3oVldTN6j1w/WCnMW/8Y4vP97v9iv7qkJqg2Jho\nTbv3Qr35yHiXIfDOlxdKkv7UaC/TZBczqVv2FTj1eRJjjdLUW0e4PT9v+X49OGOpnvvjGuUVluqT\nRXu0/cBJpxAaF8N//gAACBb+qwsgrDVeGCjK0yo5HlwxukeTr2mXHGe0yyqqXY6prKrRAzOW6qHX\nljarrpYqLq3U8i11q9C2b+sc4r2tJGsvye572A6pCUqIs7r99tZ+K5PO6UmSWjZD3DEtUTeeXXSq\nX7dUh3N3XT3QaNsvODR7/nZ9s+qgXpm70SncFpyu0Kkzlc2uBwAA+I7QCSCseVoYyBf1CwZ5WvHW\nnVd/NcZoPztntcsx977asNVIIFe5Xbje9XYl9t/JJjZ6vXb1jjyX13RMS9Tjk4Y59Tdlq5H1u/ON\ntv0Kxc314t2jHX4xMP2BMXrw+sGaMzVbFw7q5PKafUdOG+39R51Xtn1k5rIW1wUAALwjdAIIe3Om\nZmvWExOa9Mqrv3latbXes3Pcr67aUh9+t9tl//Gihu1OEuMbQue85fv1zhfbXF5TU1Prcs/SHw65\nXjDpunFZ6piW6NBnf++uGUnuCz+r8d+75355vi49r6vb8alt4jTch+9369Xv45oUb1WIfpILAECr\nRegE0Co0Z6bSH+oX6alnv0/l/EaL4uTmlwSjJLfsX29tvO/lVXbfsdYH6HFDMh3GuJuxvHpMll68\ne7Tb56a3TXB7zpXxQzPVvWOybrm0n56ZPFKvPzzO6zWuZmZdeWbySNlPONcvegQAAAKHLVMAoAWG\n9U3XVyvrthT5/YfrtOdw3WzglJ8M0GdL9jmNt9/2xR/+ufqg0/0enzRMbZNi9dv3Xb/y68pF53Zy\nWjn29iv669pxvRy+XfXkggEdtHrHcYc++9WHJemXV/TXH7/ZqdcfHuf0netjNw3TwePFumJUQ5Dv\n06WtT8+2n5kdc24nLd96zOW4mEa/nDh1plIJcdFas/O4Dh4r0S2X9ZWFqVAAAPyKmU4AaAH77yTr\nA6ckzfl6h8vxv/rfJX57dlV1jf5vwR6HVWJ/PKq7BvZMMxbvqffYTXUzgT86v5vLe3Wyez124ogu\nkupWB/Y1cErSvT91Xjn4sUYzkOOGdtacqdlqkxCjJ86eG9izLpgOykpzCJzN9fPsPnr/qYkuz6Wn\nJuiCAQ1btzz25nLdP32J/vj1Tv1nfW6z9n0FAACeMdMJAC3QqdG3jK5Myu6juQv2GMc2m00vfrRe\ne3JP6d3HJ7hdAdabe15Z7NR3/dk9RhvP1g3KqpsJ3PBDvtM1z985SpL05iPjVV5Z06Sg6Y2nFWsH\n9EwLyHe41ugoWSwWXTqyq/69znmBpXt/eq5W71jg8trpH2+SJA3u1V4PXH+uYqzRLscBAADfMdMJ\nAC3gy6uYFXbfeUrSHS8t1J7culnRpZuPuL2uttamquoal+cqKl33u/q2NcluAaH8IucFj7qcnRVN\niLO2OHDazyKOH5rpYaT/XTcuSwN7tlNcbF1QvOWyfm7H2v9MXNmyr0DPzPrer/UBABCpCJ0A0ELn\n9e/g8XxifIzutttL0t7Og0Vur7vz5YW655XFDnte1ps13/XKs65069DGaNe/OivVBcTnfnm+z/fx\nxZSfDDDav/hxf7/e25urx2Tp8UnD3c6u3nxJX6P99G0jvd6v4LT3FYkBAIB3hE4AaKFrx2YZ7fS2\n8cq2C3bnnZOh8UM7a7SbvSTX7jzusv+w3Uq3p0oqnc5v+OGEU9+zt7sOkEcKSo32rZc2zP7d+9Nz\n1b1jsstrmis2JlpXXdRT147L8vhqbbA8dtMwXTs2S3OmZusyu+9ZG3/z6s4f/rbBaaYaAAA0jcUW\nyN3Kz8rPd96UGwBakxOnyhRlsSgtJd7tmCnTXH9H6Oq7xj99s1NLNtW9ehsXG61LR3bVzy6u27LE\nZrPpjpcWer1PzrFi/e7Pa/XGr8cbr5yiQXVNre7+wyKv40YP7Ki7rxkU+IIAAAhjGRnuf5HNQkIA\n4Ae+7EV5+xX9HVaa9STN7tvKisoafbUyR22TYrV86zHlHGv4Rd41Y3rKYrFozGDnmdQenZI1+0nX\nq7ii7vvXLulJOnzijMdxRSUVQaoIAIDWiddrASBIxg/trJm/HufU7+qFE1cr2v713z84BE5J6tst\nVT8dm+VT6IWzB3422OsYT9/dAgAA7widABBESfExTn2nS6uc+orLnPsai7FGaWCPdn6pK1J1bOe8\n5U2H1AReRwYAwI8InQAQZNMfGONw/OJf1jmN+Y+L/SUbs1h827IFns16YoLee6rhNeSbLunjtP9q\nEJY/AACg1SJ0AkCQpbaJ0/t2Ied4YZnD+d/9ea2qqp23SWmsssr7GHhnjY5SlMVi7HHau3NbPdNo\nS5W8wjKdKqnw6e8LAABwROgEABNYLBZ179iwf2b9TNrJ0+Xad+S00X/JyK6SpORE59dyxw/tHOAq\nI8vMh8fpxbtHKyUpVjHWKIfVgJ+ZtUqPvLFcz3+w1sQKAQAIT4ROADDJ1FtHGO07XlqoisoaPf7W\nCocxt17WT3OmZuuV+8c0vlw3X9I34DVGkrjYaHVMc/7G016u3f6pAADAN2yZAgAmiY91/FfwoeOO\ngeZ3d44y2vUzb4XFddt3tLPbUgXBVVJWpTYJzjPPAADANWY6ASBELNzguHhQ5/QkpzHtkuMInEFk\nv8BQvY0/nDChEgAAwhehEwBCxMpteUb75kt5dTYURFksmvXEBIe+OV/vMKcYAADCFKETAEz09mMX\nu+y/7LxuQa4E7lijo3Re/w5mlwEAQNgidAKAieJiojV6YEeHvqduGW5SNXDn/mvP1esPjzO7DAAA\nwhKhEwBMdvWYng7H/bqlmlMIPGLxIAAAmofQCQAmy0hNMNo/u7iXLBaLidXAF9U1tWaXAABA2GDL\nFAAwmTU6So9NGqZO7RLVvm282eXAgz5d22pP7ikVl1axijAAAD5iphMAQsCgnmkEzjCQfvbvUVlF\ntcmVAAAQPgidAAD4KDWpbnazvLLG5EoAAAgfhE4AAHwUHxctSTp0vNjkSgAACB+ETgAAfLRiyzFJ\n0gff7jL6SsqqNGXaAn2/Pc9pvM1m06mSiqDVBwBAKCJ0AgDgo+NFZU59D722VJL07rxtTue+XpWj\nR95Yrg0/5Ae8NgAAQhWhEwAAH932o34ez5eUVRntbQdO6u+L90mS1u4kdAIAIhehEwAAH00c3sVo\n19Q679X50GtL9f32PJ0pr9Krczca/Su3HQtKfQAAhCJCJwAAPrJYLEZ72/5Cl2PenbdN/1mb69R/\n8nR5wOoCACCUEToBAGiGxHir23OfL9vv1Lf3yOlAlgMAQMgidAIA0ARXjOouSXrrsy16Ze4Gn697\n+/OtgSoJAICQRugEAKAJ4mLq9uosKqnU9gOuX7F1p7bW5tRXU1urf605pDPlVS6uAAAg/BE6AQBo\nAnevyb7x63Fery0qqVCtzablW46qrKJaknTXy4v0t//8oAdnLPVrnQAAhAr3H6QAAAAnW/YVuOxP\njI9RlMWiWpvzbGa9xRuPKCevWJv3Fuj9r3ZoxkNjA1UmAAAhg5lOAACaoH1KvFPf1FtHSJLee2qi\nx2vnrzigzXsbQuuvX1/m3+IAAAhBhE4AAJrg6dtGOBzPeGis+nVL9XhNp7REn+5dcIptVQAArQ+h\nEwCAJkhLidevrhtsHCcnxDic75CaIEm6bnwvo6+4tNKnez/x9go/VAgAQGghdAIA0EQjz8kw2haL\nxeHci/eM1vQHxujK0T0kSdZoi568xXF2FACASMJCQgAANMPMX4+TqzWDLBaLUtvESZJeuGuUkuJj\nlJIU6/FePTolK+dYsSRpw+58Deub7hRmAQAIV8x0AgDQDEnxMWrT6NXaxjLbJxmB09PYp29tmAmd\n+Y8tWrThsH+KBAAgBDDTCQBAELz20FgdzCtRflGZenVO0eNvNXy/GRsT7TD2q1U5mjiia7BLBAAg\nIJjpBAAgCCwWi3p0StZ5/TsozW7blbSUuldx77p6oNF3qsS3hYcAAAgHhE4AAEx055V1YbO6utbo\nu+qiniZVAwCA/1lsNlfLIPhXfn5xoB8BAEBYOX2mUrn5JRrYM02SVFFZo/umLzbOz5mabVZpAAA0\nWUZGsttzzHQCAGCClKRYI3BKUlxstPp0bWtiRQAABAahEwCAEPHYz4cZ7drAv4gEAEBQEDoBAAgR\nMTEN/1kur6gxsRIAAPyH0AkAQIiIsliM9gMzlmjZ5qMmVgMAgH8QOgEACFFzvt5hdgkAALQYoRMA\nAAAAEDA+hc5NmzZp8uTJkqQ9e/bo5ptv1qRJkzR16lRVV1cHtEAAACJJm4QYs0sAAMCvvIbO2bNn\n6//9v/+niooKSdL06dP16KOPau7cuZKkhQsXBrZCAAAiyO1X9Hc4Xr0jz6RKAADwD6+hs3v37po5\nc6ZxPHPmTJ1//vmqrKxUfn6+2rRpE9ACAQCIJCP6Zej9pyYax+98sc3EagAAaDmvofPyyy+X1Wo1\njqOjo3X48GFdddVVKiwsVP/+/T1cDQAAmspit4qtJJVV1H3KUl1Ta0Y5AAC0SLMWEurSpYu+++47\n3XzzzZo2bZq/awIAIOLZx84dOYWat3y/7v7DIuUXlZlWEwAAzdHk0HnvvffqwIEDkqSkpCRFRbEA\nLgAA/vbqA2OMdm5+iT5ful+S9NG/dptVEgAAzWL1PsTR3XffralTpyomJkYJCQn63e9+F4i6AACI\naKlt4nTduCx9tnS/ETglafPeAhOrAgCg6Sw2m80W6Ifk5xcH+hEAALQ636zK0SeL9jr1v//URKfv\nPgEAMFNGRrLbc7wbCwBAiNp24KTL/vLKmiBXAgBA8xE6AQAIUR3bJbrsP1JwJsiVAADQfIROAABC\n1A0Tervsf+HP64JcCQAAzdfkhYQAAEBwJMRZ9c5jF+tQfolqamya9tF641xtrU0l5VVKSYw1sUIA\nALwjdAIAEMJiY6LVu3Nbp/47X15otOdMzXY6X1tr07/X5SojNV7D+2YEtEYAADzh9VoAAMLEK/df\n5LJ/9vxtqq6pdej7eOEezf3PD5r59y36bMm+YJQHAIBLhE4AAMJEWkq8Jgzv4tS/clueXvnbBoe+\n79YcMtrzVxzQlGkLtPtQUcBrBACgMUInAABhZNW2Yy77d+ee8nqt/TehAAAEC6ETAIAwkt423uwS\nAABoEkInAABhJHtkV7fnbDab1+t9GQMAgD8ROgEACCOjBnSUJE0Y3kXP3n6++ndPNc7VLybkKViW\nV9YEtkAAABohdAIAEEYS4qyaMzVbv7j8HPXolKwnbxmhEf3qtkSpD5TzVxwwxj/3y/Mdrv/V/y4J\nWq0AAEiETgAAwt7xwlJJ0sOvL1N1Ta0+X7rfONe9Y7JZZQEAIInQCQBA2MvNP2O0C4srnM7ffkX/\nYJYDAIADQicAAK3Iss1HjfbNl/SVJI0f2lnvPzVRURaLpLqtU8oqqk2pDwAQeQidAACEuV9dN9ho\n23/Pedn53Yy2xWJR7dkFhnYfKtKijYc93vNEUZm+WLbfuAYAgOYidAIAEOZGnpOh9ilN27/zk4V7\nPa5y++Q7K/XFsv16ds5qrd6R19ISAQARjNAJAEArYLU6/if90Z8P9XpNUUmly/6jBQ3fiB7OP6N3\nvtimKdMWtKxAAEDEInQCANAK5J0sdTg+t1d7r9cUl7oOnb//cJ1fagIAQCJ0AgAQMf5nygUOx6ft\nQueBY6c19d2Vqqiq0Zly14sMFZwq18L1uXrkjWUO1wIA4InF5umDDj/Jzy8O9CMAAIhoh46X6Itl\n+5V7vEQj+mXo59l9XI6rqq7RPa8sNo7T28ZrSO/2WrC+bmGh/t1TtfNgkdfn/fIn/TVuSGfZbDbV\n2myKjuL32AAQyTIy3O8LTegEACDC+OP7zJHnZGhAj3b6y3e7JUnvPj5BMVaCJwBEKk+hk/86AAAQ\nYZ6/c5RP48YOznR7bt2ufCNwSlJufokee3O53v58a4vrAwC0LoROAAAiTJf0JLVLjvM6bsqVAzRn\narZevHu017HPf7BWhcUVWrPzOHt7AgAcEDoBAIhAcTHRPo/tmJbYpHuXVbheiAgAEJkInQAARKBj\njbZYaewXPz7H4XiwD1uw1Dt9hpVtAQANCJ0AAMBJv66pDse/vnGIhvVJ17O3n+/Q//wdjtuwSNKB\noywgCABoQOgEACDCvXL/RZozNVtXjO5u9HVOT3IYY7FY9NANQ9SjU7LuuWaQ0d8lo43T/VjFFgBg\nz2p2AQAAwFxpKfGSpBsu7q1RAzqqWwfnIGlv1MCOGtEvQ9ZoiyRp6q0jNO2j9cb5lduO6bz+HQJX\nMAAgrBA6AQCIQC/fe6E+X7Zfk3/U8O2mxWJR947u91mzZz+b2a+b46u4G3444Z8iAQCtgsVmC/y6\n5vn5fNsBAEBrdzCvWM/9cY0kac7UbJOrAQAEU0aG+19a8tEFAADwiy4ZDd+Bsm0KAKAeoRMAAPhF\ndKfK0U0AACAASURBVFTD/634ZNFeEysBAIQSQicAAPC7RRv+f3t3Hh9Vdf9//D3JZN8gENYQJMi+\nLyJIWF0Q64rVqi1+LVIRURAUwYWfWsGCigq4oqIVbS1qtdaqdWGXRZayCig7hABJWLIQksnM/f0B\nmWSYyT53Jsm8nv/0bPfMZ9pbHvPJOffcVPngCR4AQC1A0gkAAExx96wlyj5T4O8wAAB+RtIJAAC8\n5o2HBrnU5366xU+RAABqCpJOAADgNaEhwS71PalZfooEAFBTkHQCAACv+uM17V3qT7+7Tqdz8v0U\nDQDA30g6AQCAV4VaXVc7DxzL1r9X7fdPMAAAvyPpBAAAXhURZnVrW7wx1Q+RAABqApJOAADgVa2a\nxnhsTz+V5+NIAAA1AUknAADwqpjIUM2fPNit/dDxHN8HAwDwO5JOAADgddbgIMVEhri0RUeElDIa\nAFCXuT90AQAA4AVPj+qj9FN5+mz5Xu08eEpnzhb6OyQAgB+w0gkAAExRLzpMbRLrKeT8abYfL93t\nlXlPZufr6IkzXpkLAGA+VjoBAICptu7NlCSlZVY/UXQYhh569Udn/creLXT7FW2qPS8AwDysdAIA\nAFNde1lLl3pefqHW7TwuwzAqPdfoWUtc6t+tP1St2AAA5iPpBAAApurXqYmzXGh36L8/HdTrn2/T\n3bOWyDAMGYah1IxcGYahPUdOK99m15tfbNfXaw9Ikk7l5OtfK/ep0O7w11cAAFQD22sBAICpGsZF\nOMt7j2Tpix/3O+s/7TiuN7/Y7jK+SXykjp44o7U/H9PwS1tq5ocbdfxknrbvP+FxfrvDoeAg/o4O\nADWVxajK3pZKSk/PNvsjAABADfan55bI7jDnJ8cTd/ZWcrNYU+YGAFRMQkJMqX38WRAAAJhuaM9E\n0+a2BltMmxsAUH0knQAAwHQRYcFene+R23vo+v4XSZJO5RR4dW4AgHeRdAIAANOFh3r3GIn2Letr\nX9q5x3de/nizV+cGAHgXSScAADBdZLj3ks6Hb+suSXI4OM0WAGoDkk4AAGC68FDX7bXTR1/qLKd0\naarHR/aq8FwdL4qXJN13Uxdn26iZiyVJZ87alH4qrzqhOu3Yf0Jb9mTKYf6ZiwBQp5F0AgAA0zVt\nEOVSb9awuB4VYVXr5nFaMHWonh7Vx9neo01DSdJv+rV0trVqWnw6YkSY6+ppod2hh15dpSlvrNax\nE2eqHfPzH23Syx9v1tPvrqv2XAAQyHhPJwAAMF2jehGl9t04INlZbl4iGb1/RBfl5NkUExmqSzs2\n1ucr9unOq9uVOo+t0KF8m12S9Oj8NVowdWiV4y2aR5IOHc9xlpf8L1Xtk+q5JdEAgNKRdAIAANOF\nhbqfXvvQ77or43SewkKK+4KCLHp14kBZgy2yWCyKiQyVJCUmROv+EV3c5nht0kDd9+JySdLHS3ZX\nOi6HYWjt9mPq2S5BodYgnS2wKyLMqiUbU13GjZq5WHdc0UZ/+/5XSapWQgsAgYakEwAA+EWnVvEe\n2y/cNluWkqfiLt10pNzx36w9qB0HTmrird0kSW9/+bPWbD+mpqsjdWXvFnr/v7v02Mheio0Kcbu2\nKOEEAFQOz3QCAACfuveGTj75nB82HHap2x0OLVqyW1v3ZurZhRu0eXeG1mw/JklKyzyj9/+7S5K0\nZGOq8m1ln4ybcdo7hxUBQCAg6QQAAD6RmHDuOchL2jfy6rwNYsM9tn+77qBLfeH5pFKSdqee1pxP\ntni8bvX2oy5jPXnk9dWVjBIAAhdJJwAA8Ikn/3iJXp04UBaLxavz/m7oxR7b00+dld3h0Na9mZKk\nPUeyKj13nw7eTZABIBDxTCcAAPCJ4KAgRYR5/+/dURGuz1/ed2Nnvfb5NknSn55bWq25b0hppXtv\n6KzsMwWaMHdlteYCgEBF0gkAAGq1Di3r65q+LTWga1M1jo/06txF88VEhurpUX20/2iW3v1qp7M/\n43SeQq3Bio0K9ernAkBdwvZaAABQ6/12cOsKJ5yX90p0qY+9sbPHcZNu7aagEluBWzSK1oCuzZz1\nj5fu1iOvr9aD81gBBYCykHQCAICA8vsr27rUL2nfyJmIzh7X39me1CSmzHm+XnOwzH4AwDlsrwUA\nAAHv91e2dSaj70wZonyb3eUdoACAqmOlEwAABJxebRMkSZN+182tz2KxlJlwTrmjh1ubYRjeCw4A\n6hiSTgAAUOf8eVSfMvvH3NBJs+7tp86tGlR67nZJ9d2eC83LL6z0PAAQKEg6AQBAndM8Icql/tzY\nfpKKDw2yBgcpoV5Elee//Yo2LvUfNhyu8lwAUNdZDB/sB0lPzzb7IwAAAFykn8rTlDdWS5IWTB3q\n9fk3/ZqhBV/tUE6eTZJ0Ra9Efb/hsOaMT1FURIjLybcAUNclJJR++BornQAAoE5KqBehVk1jNah7\ns/IHV0H3Ng3VpMRrWr4/v9o5Ye5KjZ61RAeP8Ud3AJBY6QQAAKiylz/erC17Mkvtnz95sKzB/I0f\nQN3HSicAAIAJerVLKLP/0TdX+yiSYjsOnNTMDzfqzFlbha8psNlNjAhAoCPpBAAAqKKULk3L7M/M\nyvdRJMWe//v/9MuhU7r/5RVljvt67QF99MOv+nbdId07e5kWfLXDRxECCDS89RgAAKCKLBU4LOi1\nz7fpj8PbKyLM/J9dFz41deasTZHhIS5tG39J149b0/S/XzNc2lduSdOoazqYHiOAwMNKJwAAQDX8\n5Z6+Zfav33lc415aLrvDYXose9OyXOrHT+W5jXnln1vdEs4iHH4EwAwknQAAANXQOD5SL93fX3Mn\nDChz3J+eW6pRMxe7rUZ60/4016Tx4yV7KnX9659v82Y4ACCJpBMAAKDa4qLDFB0RojnjU/TYH3qV\nOfbgsRwfRXXuUKGScss5XOjYSfeVUQCoLpJOAAAAL4mJDNXFiXF66Lbufvn8D7/7xa3NUWJl9YFy\nDhdq2bj0Vx4AQFWRdAIAAHhZp4vi1f3ihh77dh065bXPWbUtTSu3pLm1X94r0Vnen5btkngWaRgX\n7iwP7dlcknSAZzoBmICkEwAAwASjftNBzROiNOnWbi7tH/3wq9c+4+0vd2jBVzuUk2fTzhJbaYdf\nmuQsf7P2gEbPWqJPlxU/39mhZX099cc+ujGlleaMT9EdV7b1WkwAcCFemQIAAGCC6IgQPXP3pabN\nfzqn+B2g4+escFlZjY8tXsVcvytdkvSf1Qecbfdc11GR4VZdn9LKfd7cAsVGhlTodTAAUBGsdAIA\nAJisvNeqlHTgaLb2HDntrH+99oD+9NwSty2ymVn5LvVNu11fgxIeGuxx/i7JDRQXHVbq50+ct1If\nL63cqbcAUBaSTgAAAJM1jo/UGw8NctZPZJ1Vof3ceztz8mx6/fNtOpF1VpL09HvrNOP9DTp28ozO\nFhTq4yV7ZHcY+mz5Xpc5i8ZfqGhr7X03dfbYH2L1/PMvLKQ4Sf1m7cEKfjMAKB/bawEAAHwgtERS\n9/BrqyRJC6YO1cR5K2V3GFq387jL+EffXONS/8/qA7p5UGtn/cPv3U+qlaSmDaIkSZ1bNfDYn5qR\n67H9uv4X6ZMSK5zLNx/RwG7NSvs6AFBhrHQCAAD4kd3hfrJsafIL7DLOb7ONCD23djC4R3OXMf27\nNClzjoQSp9aWlJbpmoy+9/XOCscFAGUh6QQAAPATT68yKcvYF5fp7llLJElHT5yRJF143E/JA4Cm\n/V9vtzmCgjwfENQg1nMyWpJRyXgBQCLpBAAA8Jlr+rZ0qW/dk1mleZ569ydn+QYPJ9AWadU0Vgum\nDnVpu+qSFh7HXt+/9Hkk6fG31ujuWUtIPAFUmsXwwb8c6em8aBgAAECSMk7l6ZE3VnttvnemDJHd\nYWj1tqPq26mJx4OCCu0O7TxwUu2S6inE6vlU2yKjZi52lqePvlT5Nru+WXvQ5ZnTokR2y55MJdQL\ndz5HCiBwJSTElNrHQUIAAAA+1LBehFtbVLhVuWcLJZ171clrk86ddHvgaLZaNI5Wbp5NE+au9Dif\nxWKRNdiiAWUc+mMNDlLnZM8HC12oVdNY7UvLkiQ98fZaj2N+3n9Cx0/l6f1vdkmS7rm+o2IiQ9Xp\novgKfQaAwML2WgAAAB/r0LK+S70o4ZSkVycOdJZbNolRkMWimMhQ9Wqb4JPYPD0HeqEXPtrkTDgl\naf4XP2v2R5ucr4EBgJJIOgEAAHxs8u09XOphocH6Tb+WGty9mctBQCWNG9FF1/e/yKXtpfv7mxVi\nleTk2fwdAoAaiKQTAADAz54fe5luHtRad17dvsxx15VIOq3BQYqLDjMlnlceHODWdt+Nncu97lRO\nvhnhAKjlSDoBAAD8LDoipELjgoOKf7pd0zfJrHAUGe4az6DuzdS7faNyryuwsb0WgDuSTgAAAD8Y\n2rN5la574b7LdPOgZF172UXeDegCEWHFp9z2OZ9wPj2qT5nX/PWbnW5tG3Yd17c/HZTd4WD7LRCg\nKpR0bt68WSNHjpQk7dixQ3fccYdGjhypu+++WxkZGaYGCAAAUBddWcr7MssTHxuu3/S7SNZgc9cO\n7rmuk7Pc4PyJuxGhrq9baRwf6VJPyzzjUjcMQ69+tk0fLd6tPz23VOPnrFBqRq5JEQOoqcr91+qt\nt97SE088ofz8c3v0Z8yYoWnTpmnhwoW68sor9dZbb5keJAAAQF3TuH6knrizt8fnJ2uCjiVef9Lo\nfNLZsF6ErrqkhS5p30gWSdPu7KUFU4dq9LUdPM5R8lTeIu97WA0FULeV+57OpKQkzZs3T4888ogk\n6cUXX1SjRue2WNjtdoWFmfMAOwAAQF2X3CzW3yGUKsQapD9e015xUa6/9W67vI3b2L6dmujtL3dI\nkkbNXKzWzWO1JzXL47y/Hj7t/WAB1GjlrnQOGzZMVmtxblqUcG7cuFEffPCB7rrrLtOCAwAAgP8M\n6NpMXVs3KHdc0AWveSkt4Syy6+DJasUFoHap0sMAX331lZ588knNnz9f8fHx5V8AAAAAnLfnSNlJ\nKYC6pdJJ57/+9S998MEHWrhwoVq0qNoD8AAAAKhbytoqfPOgZJf6J0v36LXPt5kdkiTpdE6+jp08\nU/5AAKapVNJpt9s1Y8YM5ebm6oEHHtDIkSM1d+5cs2IDAABALZGVW1BqX482CW5t63ce19PvravQ\n3PkFdjkcRpXimvjKj3r0zTX6z+r9VboeQPWVe5CQJCUmJmrRokWSpJ9++snUgAAAAFD7JNSLUMbp\nsy5tk27tps7J554JHXN9J+Xb7Hrv6+LTaw8czS533lEzFzvLC6YOrVRMizcedpY/XbZXV/RuobCQ\n4DKuAGAGc1/wBAAAgIDQvGGUJCkuKlSN6p97xUrbFvWc/Zd2bKzG59tLOp2TX+qctkK7S33VtrQK\nx5N9pkAffPuLS1uBzV7KaABmqtBKJwAAAFCWEYOS1aRBpPp1aqKIMM8/MZs0iHJrm/vpVk28tZui\nwq2yXHAK7rfrDrnU3/5yhy7r3LRC8fyw4bBbW36BXTGRFbocgBex0gkAAIBqCw+1amjPxFITTunc\nKugL912m8Td3dbbtS8vS+DkrdPesJdq+/4TLs5ufLttb5XjST511a3vkjdVVfjYUQNWRdAIAAMBn\n4mPD1b1NQ7VPqufWN/ujTXr1s62SpJPZnrfdbt2bWaHPyT7j+WCj0c8t0WufbZXd4ahgxACqi6QT\nAAAAPrfz4CmP7f/7NUOStOR/qc62y3slOssvLdpcofm37TvhLDeMC3fpW78rXYs3pl54CQCTkHQC\nAADA5x4b2avM/i9X7XeWh1+aVOXPuWt4e828t59b+9+//7VC15/KydcXP+6TrdChYyfO6Im31+rQ\n8RyPYx2GwWFFgAcknQAAAPC5i5vH6eo+npPJTedXO4vUjwnT4yWS1NXbj1b4c3q3S1CQxaLH/uCe\n5KZl5nq85vv1h/Tc3zYq96xNk175UZ+v2Kf//nRQC7/dpSMZuXr2gw1u1/zvl3SNnrVE985eppw8\nW4XjAwIBSScAAAD84tahF+vh27rrqT9e4tI+99MtzvL4m7vKYrGoWcPik2/f+vfPZc57/FSesxwZ\nHiJJiosOdRv3+Ftr3dpshXb97ftftfPgKT3w8gpne06eTT/vPynp3Cm4F5r3z63FMc9Z4dYPBDKS\nTgAAAPhNx4vildQ4RuGhwR77g87/Wr3wVNyyTqGd+sZqt7aEeu7vCJWkJ95eqyMZ51Y8DcPQmBeW\neRwXYuVnM1BV/L8HAAAAfvfapEEe27skN3CW2yTGOcv5pTw7+f36Qx7bJbls0S1yJCNXr3++TZK0\n8ZcMt/4i/1l9oNS+Qjsn4QJlIekEAABAjfCXe/q61J8b208Wi8VZn/r7ns7yuJeW6+OluzVh7grl\nni1+hvJvJQ4I6tuxsct8rZvHadLvuunpUX1c2lMzcnW2oFCfLN1d4VhLvpLl6XfXVfg6IBCV/vZe\nAAAAwIcax0cqpWtTrdySJklqGOe6JbZkAipJX685KEl6cO5KvfXIEB09ccalf/R1Hd0+o3OrBm5t\nknTfi8srFevk11epwFb6CueqbWm6rHPTSs0J1FUknQAAAKgxRl3TQa2bxapx/cgKX2N3GJqxcL32\npGa5tAddkKSWdGXvFvqulK24427qrJ5tE/Tu1zu170iWUjPcT7ktK+GUpLe/3GFK0llod2jqm6v1\n+yvaqkfbBK/PD5iB7bUAAACoUQZ1b672Let77BvYzT2Ri40KdUs4h/RsXuZn3H5FG11dyvs/e7Vr\nJIvFolHXdNAzoy9Vp1bxFYq7Vzvzk8AlG1N1Iivf5bRcoKYj6QQAAECtceew9m5tWbkFbm0jr2pX\n7ly3DrlY8ycPLnfcpFu76fJeiboxpZXLc6UXGv0b9+28VXUqJ18/7z/h1v73H371MBqo2dheCwAA\ngFojKMiiuRMGSJIKbHY9/NoqtzFF/RURHFT6FtwiFotFv7+yrSTXA4QuFBYarDcfHqwxLyyt8OeX\n5vG31igv366rLmmhjhfVV9fWDas9J+AvrHQCAACgVomOCFF0RIjiY8Pd+l68v7+iI0IqPJfFYtFN\nA5MrPD4mMtSl/vIDKS71EGuQgoMsqh8TVuE5PcnLP/dKmG/XHdLLH28pZUxhtT4D8BWSTgAAANQJ\nL9x3mepFVz7Zu+6yi5zliiSsC6YO1eW9EjXp1m6KiQxRcrNY3TyoOHFtWC9CdodR6TiK2Ao9H1J0\n4SrruJcqd+Iu4C9srwUAAECd4Gnls6LenjJE2bkFiqtg0lq03VaSnrizt0vfsfOvbim0O2QNdl/j\nycmzadHi3bpxQCtZg4NkK3SoQVxx7B98u8vtmlEzF6thXNW/H+BPJJ0AAACo9fp0aFSt64Mslgon\nnBV1z/NLtWDqULf28XNWSJJWbk1zto0YmKxrz6+4rtiS5naNJGWcPutSj4/1bryAWUg6AQAAUGu9\nM2WITucWVGlbrS8YhiFLGe8LLfLP5XvVt1NjNYyLKHdsdESIzpwtVFxUmA4ey1ZS4xhvhAqYhmc6\nAQAAUGtZLJYal3AO7t7MWT6Rle/SZyu0l3qd3W6owFbcf9fw9h5XcHPybDJkaF9alp56d53+tXKf\nF6IGzEPSCQAAAHjR9SmtnOXJr6/SvrQsZ33MC8tKve7R+Wt07+zi/paNY/Tbwa3dxt13Y2cZJc4p\n+tfKffrb979UM2rAPGyvBQAAALzowpXXZ/663uOzneVp0ThaQRaL7h/RRU0bRCrz9Fk1io9Uo3ru\nW3C/X39YV/dJqtZhSoBZSDoBAAAAk63feVwR4ZX76R10/lnQnm0TJElNG0SVOX7XoVPq16lJ1QIE\nTMT2WgAAAMBkr32+TV+tPuCx79oS7wktcn1/97by5OUXVvoawBdIOgEAAAAvmz2uv7q1buDSlnWm\nwFme9+AANa4foSt6J6pdUj236y/vlVjm/JNv7+HWlpVb4GEk4H8knQAAAICX1Y8J04Rburm0pabn\nOstR4SH6y5h+uuOKttpf4qChIhFhZW/F7dCyvttzol/8uL/qAQMmIukEAAAATDJ/8mC3tuGXJrnU\nr7qkhdsYa3DFfqaPvKqtyytaSjqRdVZpmbke+wBf4iAhAAAAwCSekseEC06fDbEGO8u3DGmtvh0r\nfhjQkJ6Jyj1r09JNR9z6Hn5tlSRV6eRcwJtY6QQAAAB8yNMznEWG9kxU/ZiwUvs9iQoPcZYLbHZJ\n0i+HTjnb5n6ypZIRAt5F0gkAAACY6KUHUlzqnl59MnfCAM0e119hIcFufZWRV2CXrdChmR9udLZt\n2p2hDbuOV2teoDpIOgEAAAATxUWFqm1iXJljoiNCKr3C6cmvh05pzAtL3dpf/WybS73AZtdpTruF\nj/BMJwAAAGCyCbd009a9merVLsGU+ZvER+roiTM6fiqvQuPvnb3MWeaZT5iNlU4AAADAZBFhVvXp\n0FjBQeb8/C56r+cnS/dU+lpbocPb4QAuSDoBAACAWi7E6v6zPiIsWK9PGuSsb/o1Q5J7kjnt7bXm\nBoeAR9IJAAAA1HIXJpJNG0Tq1YmDFBZafDDRii3nXqtyOD3HZWxFt+QCVUXSCQAAANRyFzWNcamn\nZZ5xlvt1aixJigw7d5zLM39d77vAAJF0AgAAALVe62ZxunXIxR77BnZrJkmKDA9R6gWrnEVy8mym\nxQaQdAIAAAB1wNWXJnlsdxjn/vO79Yc07Z2fnO3D+xaPf+jVH02NDYGNpBMAAACoI954aJAGdmuq\nNx8uPkDIGmzxOHbEwGRnmRNsYSaSTgAAAKCOCA0J1l3DOyjEWnyAUJvEeh7HXvj6FrbYwiwknQAA\nAECAen7sZc7y5yv2+jES1GUknQAAAEAdN/Pefh7bG8SFO8v1osN8FQ4CjNXfAQAAAAAwV6N6EWoY\nF66M02c1+bbuSm4W5+zrfnFDbdqdIcOP8aFuI+kEAAAAAsBzJbbSlpRvs0uSPlu+V9dddpEPI0Kg\nYHstAAAAEMDaJMaVPwioBpJOAAAAIIAN7NbMWXYYhkbNXKyxs5dJkgyDTbeoPrbXAgAAAAGs5AFC\nL/1jk6RzW25HzVwsSXrm7j5qnhDtl9hQN7DSCQAAAASwoCCLs7x9/0m3/q/WHPRlOKiDSDoBAAAA\nlCoyjM2RqB6STgAAACDADb80qdS+HzYe9mEkqItIOgEAAIAAF1fiuU5JevzOXi71VdvSfBkO6hiS\nTgAAACDAXdEr0Vl++YEUtW4Wp7/c09fZ9vaXOzRq5mKdzM73R3io5Ug6AQAAgABX8jCh2KhQSVLj\n+Ei3cQ+9+qPPYkLdwVPBAAAAAPTapIGyyOLSNrBbMy3ffMRZbxgX7uuwUAew0gkAAABA4aFWhYUG\nu7RdfcEBQ2cL7L4MCXUESScAAAAAj5rER+qdKUN0WecmkqScPJufI0JtRNIJAAAAoFQWi0Wjr+3o\nrH+3/pAfo0FtRNIJAAAAoMI+XbrH3yGgliHpBAAAAFBhBYUOf4eAWoakEwAAAEC5erdLcJbzbRwo\nhIoj6QQAAABQrruGd3CWx85eprz8Qj9Gg9qEpBMAAABAuSLDrS71cS8t91MkqG1IOgEAAABUyebd\nGf4OAbUASScAAACACpk9rr9LPS3zjJ8iQW1C0gkAAACgQurHhOmdKUOc9S17MmQYhh8jQm1A0gkA\nAACgwiwWi8bd1EWStPPgKX277pCfI0JNR9IJAAAAoFKiI4oPFfrH4t1+jAS1AUknAAAAgEppl1Tf\npZ5fwHs7UTqSTgAAAADV8tS7P/k7BNRgJJ0AAAAAquXYyTx/h4AajKQTAAAAQKX179zEpZ6XX+in\nSFDTWQwfnHGcnp5t9kcAAAAA8LHDx3P0/xac21obZLHo7RKvU0FgSUiIKbWPlU4AAAAAVXI6t8BZ\ndhgGq53wiKQTAAAAQJW0bh7rUh/30nI/RYKajKQTAAAAQJWEh1rLH4SAR9IJAAAAoMpeeXCgS/3L\nVfvLvSYtM1ertx01KSLUNBwkBAAAAKBabIUOjXlhqbO+YOrQUsfOWLhee1KznPU541MUExlqZnjw\nAQ4SAgAAAGCaEGvF0grDMFwSTkmaMHelGSGhBiHpBAAAAFBtk2/v4Sxv339CW/ZkuPQbhqEvVx/w\neK2t0GFqbPAvttcCAAAA8Ir7X1quuOhQpWWekXRum+3eI1la+N9dOnCs9Jygc3K8Jt3a3VdhwgRl\nba/luCkAAAAAXnEmv1BnSryr82R2vqa/v77c67btPWFmWPAzttcCAAAAMMUTb68ttS8xIcqlnpNn\nMzsc+AkrnQAAAABMkVdi1bOkNx8eJGvwufWvu2ctkSS99e+fNfHWbj6LDb5D0gkAAADAZx77Qy+F\nWIPd2rfuzfRDNPAFttcCAAAA8Iq5EwaU2T9/8mBdnBjno2hQU5B0AgAAAPCK6IgQzR7XX3cNb++x\nv2hLbUn33djZWT6Rdda02OA/JJ0AAAAAvKZ+TJgGdmvm0vaHq9pq9rj+Hsd3To53ln/ef9LU2OAf\nJJ0AAAAAvK59Uj1J0ribOmtoz0TVjwnzOC40pPj5zpjIEJ3KyZfDMHwSI3zDYhjm/y+anl76i2AB\nAAAA1D2GYajQ7vB4aNCFRs1c7Na2YOpQM8KCSRISYkrtY6UTAAAAgNdZLJYKJZyS1L9zE4/tmafP\nasf+E94MC35A0gkAAADAr5o1jHJryy+wa/Lrq/T8R5t08Bg7J2szkk4AAAAAftXxoni3trEvLnOW\nP166R9+tO6Tp76+X3eEodZ6M03kaNXOxDhwlSa1JSDoBAAAA+FXLJqU/DyhJEWFW/f2HX7X3SJaO\nZp4pddwjr6+WJD393jqvxofqqVDSuXnzZo0cOdKl7dlnn9Xf//53U4ICAAAAEFgWTB1a6uFB63ce\nd5bnfLLFWXY4DE2Yu0Jb9mRqxsL1pseIqik36Xzrrbf0xBNPKD8/X5J04sQJjR49WosXu58wBpxK\nLQAADpFJREFUBQAAAADV0TAuvMz+jNNn9e8f9ym/wK5Plu1R9hmbXv54s/akZvkoQlRWuUlnUlKS\n5s2b56zn5ubqgQce0A033GBqYAAAAAACz2/6tSx3zGcr9mnsi8v0zdqDpY7xwZshUUHlJp3Dhg2T\n1Wp11lu0aKFu3bqZGhQAAACAwNS6WZyzXJ13de48cNIb4cALOEgIAAAAQI2R2ChaI4e104w/XVrp\na/t2auwsP//RJm+GhWog6QQAAABQowzp0VxNG7i/u7M8l3Vu4iy3bh7rzZBQDSSdAAAAAGqF58de\nJknq3S7BY39sZKjuGt5ekrQnNUsOB8911gQVSjoTExO1aNEil7YHHnhAt99+uylBAQAAAIAkvfxA\niiSpUb0INYgL14KpQ3XfTV2c/ZN+V3zeTFLjGMXHhDnrh47n+C5QlMpa/hAAAAAA8I/YqFC9M2WI\nLBaLS/srDw6UJEWGW3XP9R3Vqum57bShIcHOMYUOh+8CRanYXgsAAACgRrsw4ZTOJZuR4efW0Pp2\nbKLG9SMlyWVL7T+X7fVNgCgTK50AAAAA6oyYqFBneceBkxo1c7EkacodPdQuqb6/wgpoFsMHb01N\nT882+yMAAAAAQJL02fK9+veq/R77nrizt5KbcbKttyUkxJTax/ZaAAAAAHXKTQOTS+2b/v56rd95\n3IfRgKQTAAAAQEB57fNt/g4hoJB0AgAAAAgoN6a08ncIAYWkEwAAAECd07V1g1L7Pl+5z3nAEMxH\n0gkAAACgztl16JS/Q8B5JJ0AAAAA6pzbL28jSWpcP0LRESEexxTaHb4MKWDxnk4AAAAAdc6Ark0V\nGWZV+5b1FRYSrPn/3q5bhlysqW+sdo5Zvf2oBnRt5scoAwMrnQAAAADqHIvFot7tGyk6IkQh1iCN\nu6mLGtWLcBnzv18y/BRdYCHpBAAAABCQNu0m6fQFkk4AAAAAAePxO3v5O4SAQ9IJAAAAIGC0bhan\nB2/p6qwbhuHHaMp3MjtfefmF/g6jWkg6AQAAAASUrq0bOsv7j2b7MZKyFdodeujVHzXupeX+DqVa\nSDoBAAAABKzFGw/7O4RS5ebZ/B2CV/DKFAAAAAAB68DRHH+H4KLQ7tC2fSf0xr+2qcBW/B7RtMxc\nNW0Q5cfIqo6VTgAAAAABp3nDcwnc4fSalXTe8/xSzf1ki0vCKUl/+/5XP0VUfax0AgAAAAg4Pdsm\nKDUj199hKDU9RxFh5adlrZvF+iAac5B0AgAAAAg4N6S00r9X7fdrDEcycjXtnZ8qNPaLH/frxgHJ\nJkdkDrbXAgAAAAg4QUEW0+b+YcNh/eWDDSq0O0odYxiGnnh7bblzJdQLlyQ1jAv3Wny+xkonAAAA\nAJz33tc7tXzzEc2dMEDRESFVmuPD736RJB0/madmDT0f/vPTjuNlzhEcZNGbkwdLhvT5yr3q37lp\nlWKpCVjpBAAAABCQLOcXO/PyC51tyzcfkSSNn7Oi2vPvPHjSY/vRE2f05hfby7z2iTt7K8hiUVCQ\nRSMGtlbj+Mhqx+MvJJ0AAAAAAlLPNgmSpBPZ+UpNz1FOBd+LWWh36Pv1h1Rgs5c57oNvf/HY/tj8\nNaVek9Klqd58eJBaNompUCy1AdtrAQAAAASkoyfPSJKmVeDZyiL5NrumvLFaWbkF+nHrUT35x0vK\nHl9gV1hosLP+3tc73MZM/X1PrdqWpkPHczTqNx0qHEttQdIJAAAAICClppf+ypS2iXEe28fOXuYs\nHziW7dbvcBgu9a17M9W7fSNJ0snsfC3fnObS//sr26pti3pq26JeheOubdheCwAAACAgNU/wfMiP\nJP1y+HSV5jxT4vlQSXrt823O8qufbXXpaxgXriE9mlfpc2oTkk4AAAAAAenPo/qU2W8YrquW2WcK\n3MbsOVKcnL7/zc4yDyDaeyTLWW7Xop6eG3uZqa9uqSlIOgEAAAAEJIvFoqv7JJXaP2PhBj3z13Xa\ndf4U2glzV7qPeX+DJGnz7gwt3XTE4zz5BXYdPp7j0vbIHT2qGnatQ9IJAAAAIGCNGJQsSeqS3EA3\nD0rWo3/o6ezbeyRL+9KyNetv/ytzDodhaM4nW1za4qJDneWxLy7T/1vwk7P+57v7yGKp+yucRThI\nCAAAAEDAsgYHacHUoZW6pm+nxlqz/ZizftDDgUIz7+mnsS8uc2uXpMSE6MoFWcux0gkAAAAAJUwf\nfalbW8lnNUde1U7P3F38POif31vvLPfr1ETzHhzg8pqUQEfSCQAAAAAlNGsYpQ4t67u05eTZJEm9\n2zdSRJhVzROi1Tk5XpI0clg757jR13ZQVHiIJOntKUPc5h7et/RnSOsqkk4AAAAAuEDJRLKk6IgQ\nZ7nHxQ0lSQv/u8vZVvJZzaALntscc30n3TL4Ym+GWSvwTCcAAAAAXKBJfKTH9pJJ50eLd5c7zzN3\n99FnK/Zp1DXtFRkeUu74uoiVTgAAAADwwNMBQzGRxYlj73aNXPrG3tjZbXzzhGjdP6JLwCacEkkn\nAAAAAJQqLirUpV4y6bztctetsrGRgZtYloWkEwAAAABKMeNPfWUNLn42MyYy1GNZklo0ivFZXLUJ\nSScAAAAAlCIy3KphfYpPnI2JcF3NbJMY5zIW7vhvBQAAAADKcG2/i/Sf1Qckyfk6lCIP/a67NvyS\nrpaNWeUsDUknAAAAAJQhLDRY1mCLCu2G4qJdt9SGhgSrX6cmfoqsdrAYhmGY/SHp6dlmfwQAAAAA\nwE8SEkpf6eWZTgAAAACAaUg6AQAAAACmIekEAAAAAJiGpBMAAAAAYBqSTgAAAACAaUg6AQAAAACm\nIekEAAAAAJiGpBMAAAAAYBqSTgAAAACAaUg6AQAAAACmIekEAAAAAJiGpBMAAAAAYBqSTgAAAACA\naUg6AQAAAACmIekEAAAAAJiGpBMAAAAAYBqSTgAAAACAaUg6AQAAAACmIekEAAAAAJiGpBMAAAAA\nYBqSTgAAAACAaUg6AQAAAACmIekEAAAAAJiGpBMAAAAAYBqSTgAAAACAaUg6AQAAAACmIekEAAAA\nAJiGpBMAAAAAYBqLYRiGv4MAAAAAANRNrHQCAAAAAExD0gkAAAAAMA1JJwAAAADANCSdAAAAAADT\nkHQCAAAAAExD0gkAAAAAMA1JJwAAAADANFZ/B4DayWaz6bHHHlNqaqoKCgo0duxYXXzxxZo6daos\nFovatGmjJ598UkFBQVq0aJE++ugjWa1WjR07VkOGDNHZs2c1efJkZWZmKioqSrNmzVJ8fLw2bdqk\nGTNmKDg4WCkpKbr//vv9/VURYDIzMzVixAgtWLBAVquVexq11ptvvqnFixfLZrPp9ttvV58+fbif\nUWvZbDZNnTpVqampCgoK0jPPPMO/0aiVNm/erBdeeEELFy7UgQMHTLuHX3nlFS1dulRWq1WPPfaY\nunbt6t8vbgBV8MknnxjTp083DMMwTp48aQwaNMgYM2aMsWbNGsMwDGPatGnGt99+axw/fty49tpr\njfz8fCMrK8tZXrBggTF37lzDMAzjyy+/NJ555hnDMAzj+uuvNw4cOGA4HA5j9OjRxvbt2/3zBRGQ\nCgoKjPvuu8+46qqrjN27d3NPo9Zas2aNMWbMGMNutxs5OTnG3LlzuZ9Rq3333XfG+PHjDcMwjJUr\nVxr3338/9zRqnfnz5xvXXnutccsttxiGYZh2D2/bts0YOXKk4XA4jNTUVGPEiBH++cIlsL0WVXL1\n1VdrwoQJkiTDMBQcHKzt27erT58+kqSBAwdq1apV2rJli3r06KHQ0FDFxMQoKSlJO3fu1IYNGzRg\nwADn2NWrVysnJ0cFBQVKSkqSxWJRSkqKVq1a5bfviMAza9Ys3XbbbWrUqJEkcU+j1lq5cqXatm2r\ncePG6d5779XgwYO5n1GrtWrVSna7XQ6HQzk5ObJardzTqHWSkpI0b948Z92se3jDhg1KSUmRxWJR\ns2bNZLfbdeLECb985yIknaiSqKgoRUdHKycnR+PHj9eDDz4owzBksVic/dnZ2crJyVFMTIzLdTk5\nOS7tJcdGR0e7jM3OzvbtF0PA+uc//6n4+HjnP+iSuKdRa508eVLbtm3TnDlz9PTTT+vhhx/mfkat\nFhkZqdTUVA0fPlzTpk3TyJEjuadR6wwbNkxWa/HTjWbdwzXx3uaZTlRZWlqaxo0bpzvuuEPXXXed\nnn/+eWdfbm6uYmNjFR0drdzcXJf2mJgYl/ayxsbGxvruCyGgffrpp7JYLFq9erV27NihKVOmuPxV\nkHsatUm9evWUnJys0NBQJScnKywsTEePHnX2cz+jtnnvvfeUkpKihx56SGlpafq///s/2Ww2Zz/3\nNGqjoKDi9T9v3sMhISEe5/AnVjpRJRkZGRo1apQmT56s3/72t5Kkjh07au3atZKk5cuXq3fv3ura\ntas2bNig/Px8ZWdna8+ePWrbtq169uypZcuWOcf26tVL0dHRCgkJ0cGDB2UYhlauXKnevXv77Tsi\nsHz44Yf64IMPtHDhQnXo0EGzZs3SwIEDuadRK/Xq1UsrVqyQYRg6duyY8vLy1K9fP+5n1FqxsbHO\nH81xcXEqLCzkdwdqPbPu4Z49e2rlypVyOBw6cuSIHA6H4uPj/flVZTEMw/BrBKiVpk+frq+//lrJ\nycnOtscff1zTp0+XzWZTcnKypk+fruDgYC1atEj/+Mc/ZBiGxowZo2HDhikvL09TpkxRenq6QkJC\nNHv2bCUkJGjTpk169tlnZbfblZKSookTJ/rxWyJQjRw5Uk899ZSCgoI0bdo07mnUSs8995zWrl0r\nwzA0ceJEJSYmcj+j1srNzdVjjz2m9PR02Ww23XnnnercuTP3NGqdw4cPa9KkSVq0aJH27dtn2j08\nb948LV++XA6HQ48++qjf/6BC0gkAAAAAMA3bawEAAAAApiHpBAAAAACYhqQTAAAAAGAakk4AAAAA\ngGlIOgEAAAAApiHpBAAAAACYhqQTAAAAAGCa/w96eXZkhLywBgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x4a388fd0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# сделаем еще одну итерацию по датасету, уменьшив скорость обучения в 10 раз\n",
    "acc = model.iterate_file(update_vocab=False, learning_rate=0.01)\n",
    "print('%0.2f' % acc)\n",
    "plt.plot(pd.Series(model._loss[:-25000]).rolling(10000).mean());"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.63327\n"
     ]
    }
   ],
   "source": [
    "print('%0.5f' % np.mean(model._accuracy))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "Ответьте на вопрос,  к какому значению ближе всего полученное значение точности:\n",
    "<font color=\"red\">Варианты ответа:</font>\n",
    "1. 0.48\n",
    "2. 0.58\n",
    "3. <font color=\"red\">0.68</font>\n",
    "4. 0.78"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 10. Прогнозирование тегов для новых вопросов\n",
    "\n",
    "В завершение сегодняшней домашки, вам предлагается реализовать метод `predict_proba`, который принимает строку,  содержащую вопрос, а возвращает список предсказанных тегов вопроса с их вероятностями."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Обновите определение класса LogRegressor\n",
    "class LogRegressor():\n",
    "    \n",
    "    \"\"\"Конструктор\n",
    "    \n",
    "    Параметры\n",
    "    ----------\n",
    "    tags_top : list of string, default=top_tags\n",
    "        список тегов\n",
    "    \"\"\"\n",
    "    def __init__(self, tags=top_tags):      \n",
    "        # словарь который содержит мапинг слов предложений и тегов в индексы (для экономии памяти)\n",
    "        # пример: self._vocab['exception'] = 17 означает что у слова exception индекс равен 17\n",
    "        self._vocab = {}\n",
    "        self._top={}\n",
    "        \n",
    "        # параметры модели: веса\n",
    "        # для каждого класса/тега нам необходимо хранить собственный вектор весов\n",
    "        # по умолчанию у нас все веса будут равны нулю\n",
    "        # мы заранее не знаем сколько весов нам понадобится\n",
    "        # поэтому для каждого класса мы сосздаем словарь изменяемого размера со значением по умолчанию 0\n",
    "        # пример: self._w['java'][self._vocab['exception']]  содержит вес для слова exception тега java\n",
    "        self._w = dict([(t, defaultdict(int)) for t in tags])\n",
    "        \n",
    "        # параметры модели: смещения или вес w_0\n",
    "        self._b = dict([(t, 0) for t in tags])\n",
    "        \n",
    "        self._tags = set(tags)\n",
    "        \n",
    "        self._accuracy=[]\n",
    "    \n",
    "    \"\"\"Один прогон по датасету\n",
    "    \n",
    "    Параметры\n",
    "    ----------\n",
    "    fname : string, default=DS_FILE_NAME\n",
    "        имя файла с данными\n",
    "        \n",
    "    top_n_train : int\n",
    "        первые top_n_train строк будут использоваться для обучения, остальные для тестирования\n",
    "        \n",
    "    total : int, default=10000000\n",
    "        информация о количестве строк в файле для вывода прогресс бара\n",
    "    \n",
    "    learning_rate : float, default=0.1\n",
    "        скорость обучения для градиентного спуска\n",
    "        \n",
    "    tolerance : float, default=1e-16\n",
    "        используем для ограничения значений аргумента логарифмов\n",
    "    \"\"\"\n",
    "    def iterate_file(self, \n",
    "                     fname=DS_FILE_NAME, \n",
    "                     top_n_train=100000, \n",
    "                     total=125000,\n",
    "                     learning_rate=0.1,\n",
    "                     tolerance=1e-16,\n",
    "                     lmbda=0.0002,\n",
    "                     gamma=0.1,\n",
    "                     update_vocab=True):\n",
    "        \n",
    "        self._loss = []\n",
    "        n = 0\n",
    "        \n",
    "        # откроем файл\n",
    "        with open(fname, 'r') as f:            \n",
    "            \n",
    "            # прогуляемся по строкам файла\n",
    "            for line in tqdm_notebook(f, total=total, mininterval=1):\n",
    "                pair = line.strip().split('\\t')\n",
    "                if len(pair) != 2:\n",
    "                    continue                \n",
    "                sentence, tags = pair\n",
    "                # слова вопроса, это как раз признаки x\n",
    "                sentence = sentence.split(' ')\n",
    "                # теги вопроса, это y\n",
    "                tags = set(tags.split(' '))\n",
    "                \n",
    "                if n > top_n_train:\n",
    "                    pred_tags=set()\n",
    "                \n",
    "                # значение функции потерь для текущего примера\n",
    "                sample_loss = 0\n",
    "\n",
    "                # прокидываем градиенты для каждого тега\n",
    "                for tag in self._tags:\n",
    "                    # целевая переменная равна 1 если текущий тег есть у текущего примера\n",
    "                    y = int(tag in tags)\n",
    "                    \n",
    "                    # расчитываем значение линейной комбинации весов и признаков объекта                    \n",
    "                    #z = sum([x*self._w[tag][self._vocab[x]] for x in sentence])\n",
    "                    z=self._b[tag]\n",
    "   \n",
    "                    for word in sentence:\n",
    "                        # если в режиме тестирования появляется слово которого нет в словаре, то мы его игнорируем\n",
    "                        if n >= top_n_train and word not in self._vocab:\n",
    "                            continue                       \n",
    "                        if word not in self._vocab:\n",
    "                            if update_vocab==True:\n",
    "                                self._vocab[word] = len(self._vocab)\n",
    "                                z += 1*self._w[tag][self._vocab[word]]\n",
    "                            else:\n",
    "                                z += 0\n",
    "                        else:\n",
    "                            z += 1*self._w[tag][self._vocab[word]]\n",
    "                            \n",
    "                        if word in self._top:\n",
    "                            self._top[word]+=1\n",
    "                        else:\n",
    "                            self._top[word]=1    \n",
    "                        \n",
    "    \n",
    "                    # вычисляем вероятность наличия тега\n",
    "                    #if z<0: z=0\n",
    "                    sigma = 1/(1+np.exp(-z))\n",
    "                    \n",
    "                    if sigma>(1-tolerance): sigma=(1-tolerance)\n",
    "                    elif sigma<tolerance: sigma=tolerance\n",
    "                    \n",
    "                    if n > top_n_train:\n",
    "                        if sigma>0.9: pred_tags.add(tag)\n",
    "                    \n",
    "                    # обновляем значение функции потерь для текущего примера\n",
    "                    sample_loss += -y*np.log(sigma)-(1-y)*np.log(1-sigma)\n",
    "                 \n",
    "                    \n",
    "                    # если мы все еще в тренировочной части, то обновим параметры\n",
    "                    if n < top_n_train:\n",
    "                        # вычисляем производную логарифмического правдоподобия по весу\n",
    "                       \n",
    "                        dLdw = (y-sigma)-lmbda*(2*gamma*self._w[tag][self._vocab[word]]+(1-gamma)*np.sign(self._w[tag][self._vocab[word]]))\n",
    "\n",
    "                        # делаем градиентный шаг\n",
    "                        # мы минимизируем отрицательное логарифмическое правдоподобие (второй знак минус)\n",
    "                        # поэтому мы идем в обратную сторону градиента для минимизации (первый знак минус)\n",
    "                        for word in sentence:  \n",
    "                            if word in self._vocab:\n",
    "                                self._w[tag][self._vocab[word]] -= -learning_rate*dLdw\n",
    "                        self._b[tag] -= -learning_rate*dLdw\n",
    "                    \n",
    "               \n",
    "                        \n",
    "                self._loss.append(sample_loss)\n",
    "                \n",
    "                if n > top_n_train:\n",
    "                    self._accuracy.append(len(tags & pred_tags)/len(tags | pred_tags))\n",
    "                \n",
    "                n += 1\n",
    "        \n",
    "        return np.mean(self._accuracy)\n",
    "    \n",
    "    def filter_vocab(self,n=10000):\n",
    "        \n",
    "        top_words=sorted(self._top.keys(),key=(lambda x: self._top[x]),reverse=True)\n",
    "        top_words=top_words[:n]\n",
    "        self._vocab1={word:self._vocab[word] for word in top_words}\n",
    "        self._vocab=self._vocab1\n",
    "        \n",
    "    def predict_proba(self,line):\n",
    "        \n",
    "        sentence = line.split(' ')\n",
    "        pred_tags={}\n",
    "        for tag in self._tags:\n",
    "        \n",
    "            z=self._b[tag]\n",
    "            for word in sentence:                                      \n",
    "                if word in self._vocab:\n",
    "                   \n",
    "                    z += 1*self._w[tag][self._vocab[word]]\n",
    "                else:\n",
    "                    z += 0\n",
    "\n",
    "            sigma = 1/(1+np.exp(-z))\n",
    "\n",
    "            #if sigma>(1-tolerance): sigma=(1-tolerance)\n",
    "            #elif sigma<tolerance: sigma=tolerance\n",
    "\n",
    "            pred_tags[tag]=sigma\n",
    "        return pred_tags    \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "6b6d08b64922434da460349261303435"
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:114: RuntimeWarning: overflow encountered in exp\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "0.58\n"
     ]
    }
   ],
   "source": [
    "model = LogRegressor()\n",
    "acc = model.iterate_file(update_vocab=True)\n",
    "print('%0.2f' % acc)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3fe95bfc51804acfb0871ff0a50246c3"
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:114: RuntimeWarning: overflow encountered in exp\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "0.63\n"
     ]
    }
   ],
   "source": [
    "model.filter_vocab(n=10000)\n",
    "acc = model.iterate_file(update_vocab=False, learning_rate=0.01)\n",
    "print('%0.2f' % acc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "sentence = (\"I want to improve my coding skills, so I have planned write \" +\n",
    "            \"a Mobile Application.need to choose between Apple's iOS or Google's Android.\" +\n",
    "            \" my background: I have done basic programming in .Net,C/C++,Python and PHP \" +\n",
    "            \"in college, so got OOP concepts covered. about my skill level, I just know \" +\n",
    "            \"concepts and basic syntax. But can't write complex applications, if asked :(\" +\n",
    "            \" So decided to hone my skills, And I wanted to know which is easier to \" +\n",
    "            \"learn for a programming n00b. A) iOS which uses Objective C B) Android \" + \n",
    "            \"which uses Java. I want to decide based on difficulty level\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def predict_proba1(model,line):\n",
    "        \n",
    "        sentence = line.split(' ')\n",
    "        print(sentence)\n",
    "        pred_tags={}\n",
    "        for tag in model._tags:\n",
    "            z=0\n",
    "            #z=model._b[tag]\n",
    "            for word in sentence:                                      \n",
    "                if word in model._vocab:\n",
    "                   \n",
    "                    z += 1*model._w[tag][model._vocab[word]]\n",
    "                else:\n",
    "                    z += 0\n",
    "\n",
    "            sigma = 1/(1+np.exp(-z))\n",
    "\n",
    "            #if sigma>(1-tolerance): sigma=(1-tolerance)\n",
    "            #elif sigma<tolerance: sigma=tolerance\n",
    "\n",
    "            if sigma>0.9: pred_tags[tag]=sigma\n",
    "        return pred_tags    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['I', 'want', 'to', 'improve', 'my', 'coding', 'skills,', 'so', 'I', 'have', 'planned', 'write', 'a', 'Mobile', 'Application.need', 'to', 'choose', 'between', \"Apple's\", 'iOS', 'or', \"Google's\", 'Android.', 'my', 'background:', 'I', 'have', 'done', 'basic', 'programming', 'in', '.Net,C/C++,Python', 'and', 'PHP', 'in', 'college,', 'so', 'got', 'OOP', 'concepts', 'covered.', 'about', 'my', 'skill', 'level,', 'I', 'just', 'know', 'concepts', 'and', 'basic', 'syntax.', 'But', \"can't\", 'write', 'complex', 'applications,', 'if', 'asked', ':(', 'So', 'decided', 'to', 'hone', 'my', 'skills,', 'And', 'I', 'wanted', 'to', 'know', 'which', 'is', 'easier', 'to', 'learn', 'for', 'a', 'programming', 'n00b.', 'A)', 'iOS', 'which', 'uses', 'Objective', 'C', 'B)', 'Android', 'which', 'uses', 'Java.', 'I', 'want', 'to', 'decide', 'based', 'on', 'difficulty', 'level']\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'c#': 0.95201809042502694,\n",
       " 'java': 0.9999995487515827,\n",
       " 'javascript': 0.99943989560571611}"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predict_proba1(model,sentence)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ответьте на вопрос, какой или какие теги ассоциируются с данным вопросом, если порог принятия равен $0.9$?\n",
    "\n",
    "Из предобработки вопроса (sentence) сделайте только приведение к нижнему регистру, а также избавьтесь от запятых. \n",
    "\n",
    "<font color=\"red\">Варианты ответа:</font>\n",
    "1. android\n",
    "2. ios\n",
    "3. ios, php\n",
    "4. java"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
